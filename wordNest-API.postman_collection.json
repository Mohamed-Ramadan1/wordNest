{
	"info": {
		"_postman_id": "3a60def7-9c6f-4e77-8817-8557c66c5de6",
		"name": "wordNest-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31297722"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"jwt\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"kick@gmail.com\",\n    \"firstName\":\"Mohamed \",\n    \"lastName\":\"Ramadan\",\n    \"password\":\"123456789\"\n}   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/auth/register",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"jwt\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"mohamedramadan11b@gmail.com\",\n    \"password\":\"123456789\"\n}   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/auth/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "### Auth Login\n\nThis endpoint is used to authenticate and log in a user.\n\n#### Request Body\n\n- email (text, required): The email address of the user.\n- password (text, required): The password of the user.\n    \n\n#### Response\n\nThe response of this request can be documented as a JSON schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"token\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"jwt\", pm.response.json().token);",
									"// pm.variables.get(\"variable_key\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/auth/logout",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth",
								"logout"
							]
						},
						"description": "### Auth Logout\n\nThis endpoint is used to log out the user and invalidate the authentication token.\n\n#### Request Body\n\n- No request body is required for this endpoint.\n    \n\n#### Response Body\n\nThe response is in JSON format and includes the following fields:\n\n- `status` (string): Indicates the status of the logout operation.\n- `message` (string): Provides additional information about the logout status.\n- `token` (string): Represents the invalidated authentication token.\n    \n\n#### JSON Schema\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"token\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Resend verification email",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{URL}}/auth/verify-email/resend",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth",
								"verify-email",
								"resend"
							]
						},
						"description": "### Auth Verify Email Resend\n\nThis endpoint is used to resend the verification email for the user.\n\n#### Request\n\n- Method: POST\n- URL: {{URL}}/auth/verify-email/resend\n- Body: form-data\n    \n\n#### Request Body Parameters\n\n- No request body parameters were provided for this request.\n    \n\n#### Response\n\nThe response for this request is in JSON format and includes the following fields:\n\n- `status` (string): Indicates the status of the request.\n- `message` (string): Provides additional information or a message related to the request.\n    \n\n#### Response JSON Schema\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Verify email",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/auth/verify-email/00c512fccb95fb9b9dcd988ffc61ba28d93d4711092c421adf94f87784e6eefc",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth",
								"verify-email",
								"00c512fccb95fb9b9dcd988ffc61ba28d93d4711092c421adf94f87784e6eefc"
							]
						},
						"description": "## Verify Email\n\nThis endpoint is used to verify the user's email using the provided token.\n\n### Request Body\n\n- token (string, required): The verification token sent to the user's email.\n    \n\n### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"status\": \"string\",\n  \"message\": \"string\"\n}\n\n ```\n\n- status (string): The status of the verification process.\n- message (string): A message indicating the result of the verification process."
					},
					"response": []
				},
				{
					"name": "Forgot password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"DDDD@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/auth/password/forgot",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth",
								"password",
								"forgot"
							]
						},
						"description": "\n# Forgot Password\n\nThis endpoint is used to initiate the process of resetting a user's password by sending a reset link to the provided email address.\n\n## Request\n\n- Method: POST\n- URL: {{URL}}/auth/password/forgot\n- Body:\n  - email (string, required): The email address of the user requesting the password reset.\n\n## Response\n\nThe response for this request follows the JSON schema below:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"success\": {\n      \"type\": \"boolean\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\nThe response object contains the following properties:\n- success (boolean): Indicates whether the password reset request was successful.\n- message (string): A message providing information about the password reset process.\n\n"
					},
					"response": []
				},
				{
					"name": "Reset password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"newPassword\":\"Aa1234567@!\",\n    \"confirmNewPassword\":\"Aa1234567@!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/auth/password/reset/ac21ff775a6d6d347293407f5a235898edb218814609b2aae0e6f57145330462",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth",
								"password",
								"reset",
								"ac21ff775a6d6d347293407f5a235898edb218814609b2aae0e6f57145330462"
							]
						},
						"description": "### Reset Password\n\nThis endpoint is used to reset the password by providing a new password and confirming the new password.\n\n#### Request Body\n\n- `newPassword` (string, required): The new password for the user account.\n- `confirmNewPassword` (string, required): The confirmation of the new password.\n    \n\n#### Response\n\n- `status` (string): The status of the password reset operation.\n- `message` (string): A message related to the password reset operation.\n    \n\nExample:\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\"\n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "**Auth Collection Description:**\n\nThis collection contains all the API endpoints related to user authentication and authorization. It includes routes for user registration, login, password reset, email verification, and token management. The authentication processes are built to ensure secure access to protected resources within the application.\n\nEndpoints:\n\n- **Registration**: Allows new users to create an account.\n    \n- **Login**: Allows users to authenticate and receive a JWT token.\n    \n- **Password Reset**: Handles user requests to reset their passwords.\n    \n- **Email Verification**: Verifies the email address after registration.\n    \n- **Token Refresh**: Allows users to refresh their JWT tokens.\n    \n\nEnsure you have the necessary environment variables and request bodies configured before testing these endpoints."
		},
		{
			"name": "support tickets",
			"item": [
				{
					"name": "user",
					"item": [
						{
							"name": "create support ticket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "attachment",
											"type": "file",
											"src": "/home/mohamed/Pictures/Screenshots/Screenshot from 2025-03-31 21-58-14.png"
										},
										{
											"key": "subject",
											"value": "subject of tecket ",
											"type": "text"
										},
										{
											"key": "description",
											"value": "descripe your ticket ",
											"type": "text"
										},
										{
											"key": "category",
											"value": "technical",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/support-tickets",
									"host": [
										"{{URL}}"
									],
									"path": [
										"support-tickets"
									]
								},
								"description": "This endpoint allows you to create a new support ticket by sending an HTTP POST request to {{URL}}/support-tickets. The request should include form-data in the body with the following parameters:\n\n1. attachment (file) - The file attachment for the support ticket.\n    \n2. subject (text) - The subject of the support ticket.\n    \n3. description (text) - The description of the support ticket.\n    \n4. category (text) - The category of the support ticket.\n    \n\nUpon successful execution, the endpoint returns a JSON response with a status code of 200 and the following content:\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\"\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "get all user tickets",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/support-tickets",
									"host": [
										"{{URL}}"
									],
									"path": [
										"support-tickets"
									]
								},
								"description": "### GET /support-tickets\n\nThis endpoint retrieves support tickets.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"status\": \"string\",\n  \"results\": 0,\n  \"data\": {\n    \"userSupportTickets\": [\n      {\n        \"_id\": \"string\",\n        \"user\": \"string\",\n        \"subject\": \"string\",\n        \"description\": \"string\",\n        \"attachments\": {\n          \"imageLink\": \"string\",\n          \"imagePublicId\": \"string\",\n          \"uploadedAt\": \"string\"\n        },\n        \"category\": \"string\",\n        \"status\": \"string\",\n        \"priority\": \"string\",\n        \"resolvedAt\": \"string\",\n        \"closedAt\": \"string\",\n        \"responses\": [],\n        \"createdAt\": \"string\",\n        \"updatedAt\": \"string\",\n        \"__v\": 0,\n        \"id\": \"string\"\n      }\n    ]\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "get user ticket by id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/support-tickets/67d2ca27983ad52d8813228e",
									"host": [
										"{{URL}}"
									],
									"path": [
										"support-tickets",
										"67d2ca27983ad52d8813228e"
									]
								},
								"description": "### Get Support Ticket Details\n\nThis endpoint retrieves the details of a specific support ticket.\n\n#### Request\n\n- Method: GET\n    \n- URL: {{URL}}/support-tickets/6784fce86251dfba0bd4dfc1\n    \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"status\": \"\",\n    \"data\": {\n        \"userTIcket\": {\n            \"_id\": \"\",\n            \"user\": \"\",\n            \"subject\": \"\",\n            \"description\": \"\",\n            \"attachments\": {\n                \"imageLink\": \"\",\n                \"imagePublicId\": \"\",\n                \"uploadedAt\": \"\"\n            },\n            \"category\": \"\",\n            \"status\": \"\",\n            \"priority\": \"\",\n            \"resolvedAt\": null,\n            \"closedAt\": null,\n            \"responses\": [],\n            \"createdAt\": \"\",\n            \"updatedAt\": \"\",\n            \"__v\": 0,\n            \"id\": \"\"\n        }\n    }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "replay on support ticket response",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "message",
											"value": "not work yet",
											"type": "text"
										},
										{
											"key": "attachment",
											"type": "file",
											"src": "/home/mohamed/Downloads/WhatsApp Image 2025-01-13 at 4.16.31 PM.jpeg"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/support-tickets/67d2ca27983ad52d8813228e/reply",
									"host": [
										"{{URL}}"
									],
									"path": [
										"support-tickets",
										"67d2ca27983ad52d8813228e",
										"reply"
									]
								},
								"description": "### POST /support-tickets/678539ee7d2224e3b473eab5/reply\n\nThis endpoint is used to reply to a specific support ticket identified by the ID \"678539ee7d2224e3b473eab5\".\n\n#### Request Body\n\n- `message` (text): The message content for the reply.\n    \n- `attachment` (file): A file attachment, if any.\n    \n\n#### Response\n\nThe response is in JSON format with the following schema:\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\"\n}\n\n ```\n\n- `status` (string): The status of the response.\n    \n- `message` (string): Any additional message included in the response."
							},
							"response": []
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "CRUD",
							"item": [
								{
									"name": "get support tickets",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/admin/support-tickets",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"support-tickets"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "2",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "subject",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "### GET /admin/support-tickets\n\nThis endpoint retrieves support tickets for the admin.\n\n#### Request\n\nNo request body is required for this request.\n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"status\": \"string\",\n  \"results\": 0,\n  \"data\": {\n    \"supportTickets\": [\n      {\n        \"_id\": \"string\",\n        \"user\": \"string\",\n        \"subject\": \"string\",\n        \"description\": \"string\",\n        \"category\": \"string\",\n        \"status\": \"string\",\n        \"priority\": \"string\",\n        \"resolvedAt\": \"string\",\n        \"closedAt\": \"string\",\n        \"userResponses\": [\n          {\n            \"responderId\": \"string\",\n            \"message\": \"string\",\n            \"respondedAt\": \"string\",\n            \"attachment\": {\n              \"imageLink\": \"string\",\n              \"imagePublicId\": \"string\",\n              \"uploadedAt\": \"string\"\n            },\n            \"isFollowUp\": true\n          }\n        ],\n        \"adminResponses\": [],\n        \"createdAt\": \"string\",\n        \"updatedAt\": \"string\",\n        \"__v\": 0,\n        \"id\": \"string\"\n      }\n    ]\n  }\n}\n\n ```\n\nThis endpoint retrieves the support tickets for the admin.\n\n#### Request\n\nNo request body is required for this request.\n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n- `status` (string): The status of the response.\n    \n- `results` (number): The number of results returned.\n    \n- `data` (object):\n    \n    - `supportTickets` (array):\n        \n        - `_id` (string): The ID of the support ticket.\n            \n        - `user` (string): The user associated with the support ticket.\n            \n        - `subject` (string): The subject of the support ticket.\n            \n        - `description` (string): The description of the support ticket.\n            \n        - `category` (string): The category of the support ticket.\n            \n        - `status` (string): The status of the support ticket.\n            \n        - `priority` (string): The priority of the support ticket.\n            \n        - `resolvedAt` (string): The date and time when the support ticket was resolved, if applicable.\n            \n        - `closedAt` (string): The date and time when the support ticket was closed, if applicable.\n            \n        - `userResponses` (array):\n            \n            - `responderId` (string): The ID of the responder.\n                \n            - `message` (string): The response message from the user.\n                \n            - `respondedAt` (string): The date and time when the response was made.\n                \n            - `attachment` (object):\n                \n                - `imageLink` (string): The link to the attached image.\n                    \n                - `imagePublicId` (string): The public ID of the attached image.\n                    \n                - `uploadedAt` (string): The date and time when the image was uploaded.\n                    \n            - `isFollowUp` (boolean): Indicates if the response is a follow-up.\n                \n        - `adminResponses` (array): The responses from the admin.\n            \n        - `createdAt` (string): The date and time when the support ticket was created.\n            \n        - `updatedAt` (string): The date and time when the support ticket was last updated.\n            \n        - `__v` (number): Version key.\n            \n        - `id` (string): The ID of the support ticket."
									},
									"response": []
								},
								{
									"name": "get support ticket by id",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/admin/support-tickets/67d2ca27983ad52d8813228e",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"support-tickets",
												"67d2ca27983ad52d8813228e"
											]
										},
										"description": "# Get Support Ticket Details\n\nThis endpoint retrieves the details of a specific support ticket identified by its unique ID.\n\n## Request\n\n### URL\n\n`GET /admin/support-tickets/678539ee7d2224e3b473eab5`\n\n### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"status\": \"\",\n    \"data\": {\n        \"supportTicket\": {\n            \"_id\": \"\",\n            \"user\": \"\",\n            \"subject\": \"\",\n            \"description\": \"\",\n            \"category\": \"\",\n            \"status\": \"\",\n            \"priority\": \"\",\n            \"resolvedAt\": null,\n            \"closedAt\": null,\n            \"userResponses\": [\n                {\n                    \"responderId\": \"\",\n                    \"message\": \"\",\n                    \"respondedAt\": \"\",\n                    \"attachment\": {\n                        \"imageLink\": \"\",\n                        \"imagePublicId\": \"\",\n                        \"uploadedAt\": \"\"\n                    },\n                    \"isFollowUp\": true\n                }\n            ],\n            \"adminResponses\": [],\n            \"createdAt\": \"\",\n            \"updatedAt\": \"\",\n            \"__v\": 0,\n            \"id\": \"\"\n        }\n    }\n}\n\n ```"
									},
									"response": []
								},
								{
									"name": "Update support ticket",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"category\":\"account\",\n    \"status\":\"in_progress\",\n    \"priority\":\"urgent\"\n}       ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/admin/support-tickets/67d2ca27983ad52d8813228e",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"support-tickets",
												"67d2ca27983ad52d8813228e"
											]
										},
										"description": "### PATCH /admin/support-tickets/{ticket_id}\n\nThis endpoint is used to update a specific support ticket with the given ID.\n\n#### Request Body\n\n- `category`: (string) The category of the support ticket.\n    \n- `status`: (string) The updated status of the support ticket.\n    \n- `priority`: (string) The updated priority of the support ticket.\n    \n\n#### Response\n\nThe response is in JSON format with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
									},
									"response": []
								},
								{
									"name": "delete support ticket",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL}}/admin/support-tickets/67d2ca27983ad52d8813228e",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"support-tickets",
												"67d2ca27983ad52d8813228e"
											]
										},
										"description": "This HTTP DELETE request is used to delete a specific support ticket with the ID \"6786c6226cfcd02d98a67c79\" from the admin panel. Upon successful execution, the expected response is a status code of 204, indicating that the request has been processed successfully with no content returned in the response body."
									},
									"response": []
								},
								{
									"name": "create support ticket",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "subject",
													"value": "hell i admin and i create ticket",
													"type": "text"
												},
												{
													"key": "description",
													"value": "hello now admins can create new tickets.",
													"type": "text"
												},
												{
													"key": "category",
													"value": "technical",
													"type": "text"
												},
												{
													"key": "userEmail",
													"value": "mohamedramadan11b@gmail.com",
													"type": "text"
												},
												{
													"key": "priority",
													"value": "high",
													"type": "text"
												},
												{
													"key": "attachment",
													"type": "file",
													"src": "/home/mohamed/Pictures/Screenshots/Screenshot from 2025-01-14 23-08-58.png"
												}
											]
										},
										"url": {
											"raw": "{{URL}}/admin/support-tickets",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"support-tickets"
											]
										},
										"description": "### Add Support Ticket\n\nThis endpoint allows administrators to create a new support ticket.\n\n#### Request Body\n\n- `subject` (text): A brief description of the support ticket subject.\n    \n- `description` (text): Detailed information about the support ticket.\n    \n- `category` (text): The category of the support ticket.\n    \n- `userEmail` (text): The email address of the user raising the support ticket.\n    \n- `priority` (text): The priority level of the support ticket.\n    \n- `attachment` (file): An optional file attachment related to the support ticket.\n    \n\n#### Response\n\nUpon successful creation of the support ticket, the endpoint returns a status code of 201 and a JSON response with the following fields:\n\n- `status`: The status of the request.\n    \n- `message`: A message confirming the successful creation of the support ticket."
									},
									"response": []
								}
							]
						},
						{
							"name": "tickets priority",
							"item": [
								{
									"name": "change ticket priorty",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"priority\":\"urgent\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/admin/support-tickets/67d2ca88983ad52d8813229c/priority",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"support-tickets",
												"67d2ca88983ad52d8813229c",
												"priority"
											]
										},
										"description": "### Update Support Ticket Priority\n\nThis endpoint allows the admin to update the priority of a specific support ticket.\n\n#### Request Body\n\n- `priority` (string, required): The updated priority for the support ticket.\n    \n\nExample:\n\n``` json\n{\n    \"priority\": \"urgent\"\n}\n\n ```\n\n#### Response\n\n- Status: 200 OK\n    \n- Content-Type: application/json\n    \n\nExample:\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\"\n}\n\n ```"
									},
									"response": []
								}
							]
						},
						{
							"name": "tickets status",
							"item": [
								{
									"name": "close support ticket",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/admin/support-tickets/67ed1d022e6f6fb5fb753c45/status/close",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"support-tickets",
												"67ed1d022e6f6fb5fb753c45",
												"status",
												"close"
											]
										},
										"description": "### Update Support Ticket Status\n\nThis endpoint is used to update the status of a support ticket to \"close\".\n\n**Request Body**\n\n- No request body parameters are required for this endpoint.\n    \n\n**Response**\n\n- Status (string, required): The status of the support ticket after the update.\n    \n- Message (string, required): A message confirming the update.\n    \n\nExample:\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\"\n}\n\n ```"
									},
									"response": []
								},
								{
									"name": "reopen support ticket",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/admin/support-tickets/67d2ca88983ad52d8813229c/status/reopen",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"support-tickets",
												"67d2ca88983ad52d8813229c",
												"status",
												"reopen"
											]
										},
										"description": "### PATCH /admin/support-tickets/6786c67c6cfcd02d98a67c7d/status/reopen\n\nThis endpoint is used to reopen a specific support ticket in the admin panel.\n\n#### Request Body\n\n- No request body is required for this endpoint.\n    \n\n#### Response\n\nThe response for this request will be in JSON format with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\nThe response will include the status and message fields, both of which will be of string type."
									},
									"response": []
								}
							]
						},
						{
							"name": "response",
							"item": [
								{
									"name": "response support ticket",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "message",
													"value": "i am admin and you have to lesign to me ",
													"type": "text"
												},
												{
													"key": "internalNotes",
													"value": "you have right to be powrfull",
													"type": "text"
												},
												{
													"key": "escalationLevel",
													"value": "1",
													"type": "text"
												},
												{
													"key": "attachment",
													"type": "file",
													"src": "/home/mohamed/Pictures/Screenshots/Screenshot from 2025-01-15 15-51-26.png"
												}
											]
										},
										"url": {
											"raw": "{{URL}}/admin/support-tickets/67d2ca88983ad52d8813229c/response",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"support-tickets",
												"67d2ca88983ad52d8813229c",
												"response"
											]
										},
										"description": "### Add Support Ticket Response\n\nThis endpoint allows the admin to add a response to a specific support ticket.\n\n#### Request Body\n\n- `message` (text): The message content for the response.\n    \n- `internalNotes` (text): Internal notes for the response.\n    \n- `escalationLevel` (text): The level of escalation for the response.\n    \n- `attachment` (file): An optional file attachment for the response.\n    \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- `status`: The status of the response.\n    \n- `message`: A message indicating the result of the response addition."
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "blogs",
			"item": [
				{
					"name": "admin",
					"item": [
						{
							"name": "delete blog post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/admin/blogs/67d6af6a8c376e38da4c3fff",
									"host": [
										"{{URL}}"
									],
									"path": [
										"admin",
										"blogs",
										"67d6af6a8c376e38da4c3fff"
									]
								},
								"description": "The API endpoint sends an HTTP DELETE request to delete a specific blog with the given ID. Upon successful deletion, the server returns a 204 status code with no content in the response body.\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {}\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "get blog post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/admin/blogs/67d6af6b8c376e38da4c4003",
									"host": [
										"{{URL}}"
									],
									"path": [
										"admin",
										"blogs",
										"67d6af6b8c376e38da4c4003"
									]
								},
								"description": "### GET /admin/blogs/{blogId}\n\nThis endpoint retrieves a specific blog post by its ID.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n- `blogId` (path parameter) : The unique identifier of the blog post.\n    \n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\"type\": \"string\"},\n        \"message\": {\"type\": \"string\"},\n        \"data\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"blog\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"_id\": {\"type\": \"string\"},\n                        \"title\": {\"type\": \"string\"},\n                        \"content\": {\"type\": \"string\"},\n                        \"author\": {\"type\": \"string\"},\n                        \"isPublished\": {\"type\": \"boolean\"},\n                        \"drafted\": {\"type\": \"boolean\"},\n                        \"isEdited\": {\"type\": \"boolean\"},\n                        \"isScheduled\": {\"type\": \"boolean\"},\n                        \"isPrivate\": {\"type\": \"boolean\"},\n                        \"uploadedImages\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                        \"tags\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                        \"categories\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                        \"interActionsCount\": {\"type\": \"integer\"},\n                        \"commentsCount\": {\"type\": \"integer\"},\n                        \"isArchived\": {\"type\": \"boolean\"},\n                        \"allowComments\": {\"type\": \"boolean\"},\n                        \"sharesCount\": {\"type\": \"integer\"},\n                        \"viewsCount\": {\"type\": \"integer\"},\n                        \"toBeDeleted\": {\"type\": \"boolean\"},\n                        \"underReview\": {\"type\": \"boolean\"},\n                        \"slug\": {\"type\": \"string\"},\n                        \"seo\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"metaTitle\": {\"type\": \"string\"},\n                                \"metaDescription\": {\"type\": \"string\"},\n                                \"canonicalUrl\": {\"type\": \"string\"},\n                                \"keywords\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                                \"_id\": {\"type\": \"string\"}\n                            }\n                        },\n                        \"createdAt\": {\"type\": \"string\", \"format\": \"date-time\"},\n                        \"updatedAt\": {\"type\": \"string\", \"format\": \"date-time\"},\n                        \"__v\": {\"type\": \"integer\"},\n                        \"estimatedReadingTime\": {\"type\": \"integer\"},\n                        \"id\": {\"type\": \"string\"}\n                    }\n                }\n            }\n        }\n    }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "get blogs",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/admin/blogs?page=1&limit=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"admin",
										"blogs"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "2"
										}
									]
								},
								"description": "### GET /admin/blogs\n\nThis endpoint retrieves a list of blog posts with pagination.\n\n#### Request Parameters\n\n- `page` (integer) - The page number for pagination.\n    \n- `limit` (integer) - The maximum number of blog posts to be returned.\n    \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\",\n    \"results\": 0,\n    \"data\": {\n        \"blogs\": [\n            {\n                \"_id\": \"\",\n                \"title\": \"\",\n                \"content\": \"\",\n                \"author\": \"\",\n                \"isPublished\": true,\n                \"drafted\": true,\n                \"isEdited\": true,\n                \"isScheduled\": true,\n                \"isPrivate\": true,\n                \"uploadedImages\": [],\n                \"tags\": [\"\"],\n                \"categories\": [\"\"],\n                \"interActionsCount\": 0,\n                \"commentsCount\": 0,\n                \"isArchived\": true,\n                \"allowComments\": true,\n                \"sharesCount\": 0,\n                \"viewsCount\": 0,\n                \"toBeDeleted\": true,\n                \"underReview\": true,\n                \"slug\": \"\",\n                \"seo\": {\n                    \"metaTitle\": \"\",\n                    \"metaDescription\": \"\",\n                    \"canonicalUrl\": \"\",\n                    \"keywords\": [\"\"],\n                    \"_id\": \"\"\n                },\n                \"createdAt\": \"\",\n                \"updatedAt\": \"\",\n                \"estimatedReadingTime\": 0,\n                \"id\": \"\"\n            }\n        ]\n    }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "re-publish blog post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{URL}}/admin/blogs/67d6af6b8c376e38da4c4003/publish",
									"host": [
										"{{URL}}"
									],
									"path": [
										"admin",
										"blogs",
										"67d6af6b8c376e38da4c4003",
										"publish"
									]
								},
								"description": "The HTTP PATCH request is used to update the status of a specific blog to \"publish\" in the admin panel. The request should be sent to /admin/blogs/67b74a79215f13ac2903694f/publish.\n\n### Response\n\nThe response will be in JSON format with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "un-publish blog post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{URL}}/admin/blogs/67d6af6b8c376e38da4c4003/un-publish",
									"host": [
										"{{URL}}"
									],
									"path": [
										"admin",
										"blogs",
										"67d6af6b8c376e38da4c4003",
										"un-publish"
									]
								},
								"description": "### Update Blog Unpublish Status\n\nThis endpoint is used to update the unpublish status of a specific blog.\n\n#### Request Body\n\n- No request body parameters are required for this request.\n    \n\n#### Response\n\n- **status** (string, optional): Indicates the status of the operation.\n    \n- **message** (string, optional): Provides additional information about the operation.\n    \n\nExample Response:\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\"\n}\n\n ```"
							},
							"response": []
						}
					]
				},
				{
					"name": "blog owner",
					"item": [
						{
							"name": "CRUD",
							"item": [
								{
									"name": "create new blog post",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "enc serach test",
													"description": "the title of the blog",
													"type": "text"
												},
												{
													"key": "content",
													"value": "Artificial Intelligence (AI) is transforming industries at an unprecedented pace. From healthcare to finance, AI is enabling businesses to make smarter decisions, automate processes, and deliver personalized experiences. In this blog, we explore the latest trends in AI and what the future holds for this groundbreaking technology...\",\n  excerpt: \"Explore the latest trends in AI and what the future holds for this groundbreaking technology in 2024.",
													"description": "the blog content",
													"type": "text"
												},
												{
													"key": "categories",
													"value": "technology",
													"description": "categoryes of the blog",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "[teck,kissing]",
													"description": "array contains all tags for the blog",
													"type": "text"
												},
												{
													"key": "blogImages",
													"description": "images for the blog ",
													"type": "file",
													"src": []
												},
												{
													"key": "",
													"value": "",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{URL}}/blog-owner/blogs",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs"
											]
										},
										"description": "### Create New Blog Entry\n\nThis endpoint allows the blog owner to create a new blog entry.\n\n#### Request Body\n\n- `title` (text): The title of the blog.\n    \n- `content` (text): The content of the blog.\n    \n- `categories` (text): The categories to which the blog belongs.\n    \n- `tags` (text): The tags associated with the blog.\n    \n- `blogImages` (file): The image file for the blog.\n    \n\n#### Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"blogId\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```\n\n- `status` (string): The status of the response.\n    \n- `message` (string): A message indicating the result of the request.\n    \n- `blogId` (string): The unique identifier of the newly created blog entry."
									},
									"response": []
								},
								{
									"name": "get all user blogs",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/blog-owner/blogs",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "title",
													"disabled": true
												},
												{
													"key": "createdAt[gte]",
													"value": "2023-01-01",
													"disabled": true
												},
												{
													"key": "likes[gt]",
													"value": "100",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "title,createdAt\n",
													"disabled": true
												}
											]
										},
										"description": "The endpoint retrieves a list of blogs owned by the blog owner. The response is in JSON format and has the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": { \"type\": \"string\" },\n        \"message\": { \"type\": \"string\" },\n        \"results\": { \"type\": \"integer\" },\n        \"data\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"blogs\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"_id\": { \"type\": \"string\" },\n                            \"title\": { \"type\": \"string\" },\n                            \"content\": { \"type\": \"string\" },\n                            \"author\": { \"type\": \"string\" },\n                            \"isPublished\": { \"type\": \"boolean\" },\n                            \"drafted\": { \"type\": \"boolean\" },\n                            \"isEdited\": { \"type\": \"boolean\" },\n                            \"isScheduled\": { \"type\": \"boolean\" },\n                            \"isPrivate\": { \"type\": \"boolean\" },\n                            \"uploadedImages\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"url\": { \"type\": \"string\" },\n                                        \"publicId\": { \"type\": \"string\" },\n                                        \"_id\": { \"type\": \"string\" }\n                                    }\n                                }\n                            },\n                            \"tags\": {\n                                \"type\": \"array\",\n                                \"items\": { \"type\": \"string\" }\n                            },\n                            \"categories\": {\n                                \"type\": \"array\",\n                                \"items\": { \"type\": \"string\" }\n                            },\n                            \"interActionsCount\": { \"type\": \"integer\" },\n                            \"commentsCount\": { \"type\": \"integer\" },\n                            \"allowComments\": { \"type\": \"boolean\" },\n                            \"sharesCount\": { \"type\": \"integer\" },\n                            \"viewsCount\": { \"type\": \"integer\" },\n                            \"toBeDeleted\": { \"type\": \"boolean\" },\n                            \"slug\": { \"type\": \"string\" },\n                            \"seo\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"metaTitle\": { \"type\": \"string\" },\n                                    \"metaDescription\": { \"type\": \"string\" },\n                                    \"canonicalUrl\": { \"type\": \"string\" },\n                                    \"keywords\": {\n                                        \"type\": \"array\",\n                                        \"items\": { \"type\": \"string\" }\n                                    },\n                                    \"ogImage\": { \"type\": \"string\" },\n                                    \"_id\": { \"type\": \"string\" }\n                                }\n                            },\n                            \"createdAt\": { \"type\": \"string\" },\n                            \"updatedAt\": { \"type\": \"string\" },\n                            \"estimatedReadingTime\": { \"type\": \"integer\" },\n                            \"id\": { \"type\": \"string\" }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n ```"
									},
									"response": []
								},
								{
									"name": "get blog post by id",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/blog-owner/blogs/67c74203dccc6acde178e54e",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs",
												"67c74203dccc6acde178e54e"
											]
										},
										"description": "The endpoint retrieves the details of a specific blog owned by the blog owner.\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\"type\": \"string\"},\n        \"message\": {\"type\": \"string\"},\n        \"data\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"blog\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"_id\": {\"type\": \"string\"},\n                        \"title\": {\"type\": \"string\"},\n                        \"content\": {\"type\": \"string\"},\n                        \"author\": {\"type\": \"string\"},\n                        \"isPublished\": {\"type\": \"boolean\"},\n                        \"drafted\": {\"type\": \"boolean\"},\n                        \"isEdited\": {\"type\": \"boolean\"},\n                        \"isScheduled\": {\"type\": \"boolean\"},\n                        \"scheduleStatus\": {\"type\": \"string\"},\n                        \"isPrivate\": {\"type\": \"boolean\"},\n                        \"uploadedImages\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"url\": {\"type\": \"string\"},\n                                    \"publicId\": {\"type\": \"string\"},\n                                    \"_id\": {\"type\": \"string\"}\n                                }\n                            }\n                        },\n                        \"tags\": {\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"}\n                        },\n                        \"categories\": {\n                            \"type\": \"array\",\n                            \"items\": {\"type\": \"string\"}\n                        },\n                        \"interActionsCount\": {\"type\": \"integer\"},\n                        \"commentsCount\": {\"type\": \"integer\"},\n                        \"allowComments\": {\"type\": \"boolean\"},\n                        \"sharesCount\": {\"type\": \"integer\"},\n                        \"viewsCount\": {\"type\": \"integer\"},\n                        \"slug\": {\"type\": \"string\"},\n                        \"createdAt\": {\"type\": \"string\"},\n                        \"updatedAt\": {\"type\": \"string\"},\n                        \"editedAt\": {\"type\": \"string\"},\n                        \"__v\": {\"type\": \"integer\"},\n                        \"estimatedReadingTime\": {\"type\": \"integer\"},\n                        \"id\": {\"type\": \"string\"}\n                    }\n                }\n            }\n        }\n    }\n}\n\n ```"
									},
									"response": []
								},
								{
									"name": "delete blog post",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/blog-owner/blogs/67c743858e085381eb2c2e94",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs",
												"67c743858e085381eb2c2e94"
											]
										},
										"description": "### Delete Blog\n\nThis endpoint is used to delete a specific blog owned by the blog owner.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\n- Status (string): Indicates the status of the operation.\n    \n- Message (string): Provides additional information about the operation.\n    \n\nExample:\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\"\n}\n\n ```"
									},
									"response": []
								},
								{
									"name": "update blog post",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\":\"the heven of the sky engile \",\n    \"content\":\"while you tray to flay anther one was traying to swiming\"\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/blog-owner/blogs/scheduled/67b5cb71da07f260277e4fe6",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs",
												"scheduled",
												"67b5cb71da07f260277e4fe6"
											]
										},
										"description": "### PATCH /blog-owner/blogs/67b1faa499cb0bc727da7c29\n\nThis endpoint is used to update a specific blog owned by the authenticated user.\n\n#### Request Body\n\n- title (string, required): The updated title of the blog.\n    \n- content (string, required): The updated content of the blog.\n    \n\nExample:\n\n``` json\n{\n  \"title\": \"Updated Title\",\n  \"content\": \"Updated Content\"\n}\n\n ```\n\n#### Response\n\nThe response for this request is in JSON format with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
									},
									"response": []
								}
							]
						},
						{
							"name": "scheduled blogs",
							"item": [
								{
									"name": "create scheduled blog post",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "hello i am scheduledsdgdfgsdfgdf",
													"type": "text"
												},
												{
													"key": "content",
													"value": "very scheduled content of the blog post of athinafdgdfgfsdf",
													"type": "text"
												},
												{
													"key": "categories",
													"value": "technology",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "it tech",
													"type": "text"
												},
												{
													"key": "blogImages",
													"type": "file",
													"src": [],
													"disabled": true
												},
												{
													"key": "scheduledFor",
													"value": "19/2/2025 16:00",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{URL}}/blog-owner/blogs/scheduled",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs",
												"scheduled"
											]
										},
										"description": "### Create Scheduled Blog\n\nThis endpoint allows the blog owner to schedule a new blog post.\n\n#### Request Body\n\n- title (text, required): The title of the blog post.\n    \n- content (text, required): The content of the blog post.\n    \n- categories (text, required): The categories the blog post belongs to.\n    \n- tags (text, required): The tags associated with the blog post.\n    \n- scheduledFor (text, required): The date and time for scheduling the blog post.\n    \n\n#### Response\n\nThe response is in JSON format with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
									},
									"response": []
								},
								{
									"name": "get all  scheduled blog posts",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/blog-owner/blogs/67ad03b11fea7cf11573f7f9/scheduled",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs",
												"67ad03b11fea7cf11573f7f9",
												"scheduled"
											]
										},
										"description": "### GET /blog-owner/blogs/67ad03b11fea7cf11573f7f9/scheduled\n\nThis endpoint retrieves the scheduled posts for a specific blog.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\",\n    \"results\": 0,\n    \"data\": {\n        \"scheduledPosts\": [\n            {\n                \"_id\": \"\",\n                \"title\": \"\",\n                \"content\": \"\",\n                \"author\": \"\",\n                \"isPublished\": true,\n                \"drafted\": true,\n                \"isEdited\": true,\n                \"isScheduled\": true,\n                \"scheduledFor\": \"\",\n                \"isPrivate\": true,\n                \"uploadedImages\": [],\n                \"tags\": [\"\"],\n                \"categories\": [\"\"],\n                \"interActionsCount\": 0,\n                \"commentsCount\": 0,\n                \"isArchived\": true,\n                \"allowComments\": true,\n                \"sharesCount\": 0,\n                \"viewsCount\": 0,\n                \"toBeDeleted\": true,\n                \"scheduleStatus\": \"\",\n                \"slug\": \"\",\n                \"seo\": {\n                    \"metaTitle\": \"\",\n                    \"metaDescription\": \"\",\n                    \"canonicalUrl\": \"\",\n                    \"keywords\": [\"\"],\n                    \"_id\": \"\"\n                },\n                \"createdAt\": \"\",\n                \"updatedAt\": \"\",\n                \"estimatedReadingTime\": 0,\n                \"id\": \"\"\n            }\n        ]\n    }\n}\n\n ```\n\nThis response contains an array of scheduled posts for the specified blog, with details such as post title, content, author, publication status, scheduled date, and other related information."
									},
									"response": []
								},
								{
									"name": "get scheduled blog post",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/blog-owner/blogs/scheduled/67b5c52f02c6fb41c7b2af93",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs",
												"scheduled",
												"67b5c52f02c6fb41c7b2af93"
											]
										},
										"description": "### Get Scheduled Blog Details\n\nThis endpoint retrieves the details of a scheduled blog post with the specified ID.\n\n#### Request\n\n- Method: GET\n    \n- URL: {{URL}}/blog-owner/blogs/scheduled/67b581289e7b18389b027d0a\n    \n\n#### Response\n\nThe response will be in JSON format and will include the following fields:\n\n- `status` (string): The status of the response.\n    \n- `message` (string): A message related to the response.\n    \n- `data` (object): An object containing details of the scheduled blog post, including:\n    \n    - `scheduledPost` (object): Details of the scheduled blog post, including:\n        \n        - `_id` (string): The ID of the blog post.\n            \n        - `title` (string): The title of the blog post.\n            \n        - `content` (string): The content of the blog post.\n            \n        - `author` (string): The author of the blog post.\n            \n        - `isPublished` (boolean): Indicates if the blog post is published.\n            \n        - `drafted` (boolean): Indicates if the blog post is in draft status.\n            \n        - `isEdited` (boolean): Indicates if the blog post has been edited.\n            \n        - `isScheduled` (boolean): Indicates if the blog post is scheduled.\n            \n        - `scheduledFor` (string): The scheduled date and time for the blog post.\n            \n        - `isPrivate` (boolean): Indicates if the blog post is private.\n            \n        - `uploadedImages` (array): An array of uploaded images for the blog post.\n            \n        - `tags` (array): An array of tags associated with the blog post.\n            \n        - `categories` (array): An array of categories associated with the blog post.\n            \n        - `interActionsCount` (number): The count of interactions for the blog post.\n            \n        - `commentsCount` (number): The count of comments on the blog post.\n            \n        - `isArchived` (boolean): Indicates if the blog post is archived.\n            \n        - `allowComments` (boolean): Indicates if comments are allowed on the blog post.\n            \n        - `sharesCount` (number): The count of shares for the blog post.\n            \n        - `viewsCount` (number): The count of views for the blog post.\n            \n        - `toBeDeleted` (boolean): Indicates if the blog post is marked for deletion.\n            \n        - `scheduleStatus` (string): The status of the scheduling for the blog post.\n            \n        - `slug` (string): The slug of the blog post.\n            \n        - `seo` (object): An object containing SEO details for the blog post, including:\n            \n            - `metaTitle` (string): The meta title for SEO.\n                \n            - `metaDescription` (string): The meta description for SEO.\n                \n            - `canonicalUrl` (string): The canonical URL for SEO.\n                \n            - `keywords` (array): An array of keywords for SEO.\n                \n            - `_id` (string): The ID of the SEO details.\n                \n        - `createdAt` (string): The creation date of the blog post.\n            \n        - `updatedAt` (string): The last update date of the blog post.\n            \n        - `__v` (number): Version control field.\n            \n        - `estimatedReadingTime` (number): The estimated reading time for the blog post.\n            \n        - `id` (string): The ID of the blog post."
									},
									"response": []
								},
								{
									"name": "delete scheduled blog post",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL}}/blog-owner/blogs/scheduled/67b581289e7b18389b027d0a",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs",
												"scheduled",
												"67b581289e7b18389b027d0a"
											]
										},
										"description": "The HTTP DELETE request is used to delete a scheduled blog with the specified ID. Upon successful deletion, the API returns a response with a status code of 204 and a Content-Type of text/xml. As per the user's request, the response can be documented as a JSON schema."
									},
									"response": []
								},
								{
									"name": "reschedule blog post",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"scheduledFor\": \"19/2/2025 14:53\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/blog-owner/blogs/scheduled/67b5c52f02c6fb41c7b2af93/reschedule",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs",
												"scheduled",
												"67b5c52f02c6fb41c7b2af93",
												"reschedule"
											]
										},
										"description": "### Update Blog Reschedule\n\nThis endpoint allows the blog owner to reschedule a scheduled blog by sending an HTTP PATCH request to the specified URL.\n\n#### Request Body\n\n- `scheduledFor` (string): The new date and time for the blog to be rescheduled.\n    \n\nExample:\n\n``` json\n{\n  \"scheduledFor\": \"19/2/2025 14:53\"\n}\n\n ```\n\n#### Response\n\n- `status` (string): The status of the rescheduling process.\n    \n- `message` (string): Any additional message related to the rescheduling.\n    \n\nExample:\n\n``` json\n{\n  \"status\": \"\",\n  \"message\": \"\"\n}\n\n ```"
									},
									"response": []
								},
								{
									"name": "update scheduled blog post",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\":\"the heven of the sky engile \",\n    \"content\":\"while you tray to flay anther one was traying to swiming\"\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/blog-owner/blogs/67af43de94c1c31ffaf2bd18",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs",
												"67af43de94c1c31ffaf2bd18"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "blogs status",
							"item": [
								{
									"name": "convert blog to private",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{URL}}/blog-owner/blogs/67b1851a105189b405286e5f/private",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs",
												"67b1851a105189b405286e5f",
												"private"
											]
										},
										"description": "### Update Blog Privacy\n\nThis endpoint is used to update the privacy settings of a specific blog.\n\n#### Request Body Parameters\n\n- `status` (string, optional): The new status of the blog's privacy.\n    \n\n#### Response\n\n- `status` (string): Indicates the status of the request.\n    \n- `message` (string): Provides additional information about the request status.\n    \n\nExample:\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\"\n}\n\n ```"
									},
									"response": []
								},
								{
									"name": "convert blog post to public",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{URL}}/blog-owner/blogs/67b1851a105189b405286e5f/public",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs",
												"67b1851a105189b405286e5f",
												"public"
											]
										},
										"description": "This endpoint allows the blog owner to update the visibility of a specific blog by sending an HTTP PATCH request to the specified URL. The request should include the blog ID and the desired visibility status in the request body. The response will have a status code of 200 and a JSON object with the updated status and a message indicating the success of the operation.\n\n### Request Body\n\n- blogId (string): The unique identifier of the blog to be updated.\n    \n- visibility (string): The desired visibility status of the blog.\n    \n\n### Response\n\n- status (string): The updated status of the blog visibility.\n    \n- message (string): A message indicating the success of the operation."
									},
									"response": []
								},
								{
									"name": "archive blog post",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{URL}}/blog-owner/blogs/67b1851a105189b405286e5f/archive",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs",
												"67b1851a105189b405286e5f",
												"archive"
											]
										},
										"description": "This endpoint allows the blog owner to archive a specific blog by sending an HTTP PATCH request to the specified URL. The request should include the blog ID in the URL path.\n\n### Request Body\n\nNo request body is required for this PATCH request.\n\n### Response\n\nUpon successful execution, the server responds with a status code of 200 and a JSON object in the response body. The JSON object contains the following fields:\n\n- `status`: Indicates the status of the operation.\n    \n- `message`: Provides additional information or a message related to the operation."
									},
									"response": []
								},
								{
									"name": "un-archive blog post",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{URL}}/blog-owner/blogs/67b1851a105189b405286e5f/unarchive",
											"host": [
												"{{URL}}"
											],
											"path": [
												"blog-owner",
												"blogs",
												"67b1851a105189b405286e5f",
												"unarchive"
											]
										},
										"description": "This endpoint allows the blog owner to unarchive a specific blog by sending an HTTP PATCH request to the specified URL. The request should include the blog ID in the URL path. Upon successful execution, the server will respond with a status code of 200 and a JSON object in the response body containing the status and message fields.\n\n### Request Body\n\nThis PATCH request does not require a request body.\n\n### Response\n\n- Status (string): Indicates the status of the operation.\n    \n- Message (string): Provides additional information or a message related to the operation."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "user",
					"item": [
						{
							"name": "get blog by id",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/blogs/67b74a79215f13ac2903694f",
									"host": [
										"{{URL}}"
									],
									"path": [
										"blogs",
										"67b74a79215f13ac2903694f"
									]
								},
								"description": "# Get Blog Details\n\nThis endpoint retrieves the details of a specific blog by its ID.\n\n## Request\n\n### Endpoint\n\n`GET /blogs/67b74a79215f13ac2903694f`\n\n## Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\",\n    \"data\": {\n        \"blog\": {\n            \"_id\": \"\",\n            \"title\": \"\",\n            \"content\": \"\",\n            \"author\": \"\",\n            \"isPublished\": true,\n            \"drafted\": true,\n            \"isEdited\": true,\n            \"isScheduled\": true,\n            \"isPrivate\": true,\n            \"uploadedImages\": [],\n            \"tags\": [\"\"],\n            \"categories\": [\"\"],\n            \"interActionsCount\": 0,\n            \"commentsCount\": 0,\n            \"isArchived\": true,\n            \"allowComments\": true,\n            \"sharesCount\": 0,\n            \"viewsCount\": 0,\n            \"toBeDeleted\": true,\n            \"underReview\": true,\n            \"slug\": \"\",\n            \"seo\": {\n                \"metaTitle\": \"\",\n                \"metaDescription\": \"\",\n                \"canonicalUrl\": \"\",\n                \"keywords\": [\"\"],\n                \"_id\": \"\"\n            },\n            \"createdAt\": \"\",\n            \"updatedAt\": \"\",\n            \"__v\": 0,\n            \"addToUnderReviewBy\": \"\",\n            \"reviewStatus\": \"\",\n            \"reviewedAt\": \"\",\n            \"reviewedBy\": \"\",\n            \"estimatedReadingTime\": 0,\n            \"id\": \"\"\n        }\n    }\n}\n\n ```\n\nThe response contains the details of the blog including its title, content, author, publication status, draft status, editing status, scheduling status, privacy status, interaction counts, comments count, archiving status, comments allowance, share count, view count, deletion status, under review status, slug, SEO details, creation and update timestamps, review information, estimated reading time, and ID."
							},
							"response": []
						},
						{
							"name": "get blogs ",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/blogs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"blogs"
									]
								},
								"description": "### Get Blogs\n\nThis endpoint retrieves a list of blog posts.\n\n#### Request\n\n- Method: GET\n    \n- URL: `{{URL}}/blogs`\n    \n\n#### Response\n\nThe response will be in JSON format with the following fields:\n\n- `status` (string): The status of the response.\n    \n- `message` (string): A message related to the response.\n    \n- `results` (number): The number of results returned.\n    \n- `data` (object): An object containing the list of blog posts.\n    \n    - `blogs` (array): An array of blog post objects with the following properties:\n        \n        - `_id` (string): The unique identifier of the blog post.\n            \n        - `title` (string): The title of the blog post.\n            \n        - `content` (string): The content of the blog post.\n            \n        - `author` (string): The author of the blog post.\n            \n        - `isPublished` (boolean): Indicates if the blog post is published.\n            \n        - `drafted` (boolean): Indicates if the blog post is in draft status.\n            \n        - `isEdited` (boolean): Indicates if the blog post has been edited.\n            \n        - `isScheduled` (boolean): Indicates if the blog post is scheduled for publishing.\n            \n        - `isPrivate` (boolean): Indicates if the blog post is private.\n            \n        - `uploadedImages` (array): An array of uploaded images for the blog post.\n            \n        - `tags` (array): An array of tags associated with the blog post.\n            \n        - `categories` (array): An array of categories associated with the blog post.\n            \n        - `interActionsCount` (number): The count of interactions for the blog post.\n            \n        - `commentsCount` (number): The count of comments on the blog post.\n            \n        - `isArchived` (boolean): Indicates if the blog post is archived.\n            \n        - `allowComments` (boolean): Indicates if comments are allowed on the blog post.\n            \n        - `sharesCount` (number): The count of shares for the blog post.\n            \n        - `viewsCount` (number): The count of views for the blog post.\n            \n        - `toBeDeleted` (boolean): Indicates if the blog post is marked for deletion.\n            \n        - `underReview` (boolean): Indicates if the blog post is under review.\n            \n        - `slug` (string): The slug of the blog post.\n            \n        - `seo` (object): An object containing SEO-related information for the blog post.\n            \n            - `metaTitle` (string): The meta title for SEO.\n                \n            - `metaDescription` (string): The meta description for SEO.\n                \n            - `canonicalUrl` (string): The canonical URL for SEO.\n                \n            - `keywords` (array): An array of keywords for SEO.\n                \n            - `_id` (string): The unique identifier for SEO-related data.\n                \n        - `createdAt` (string): The date and time of creation of the blog post.\n            \n        - `updatedAt` (string): The date and time of the last update to the blog post.\n            \n        - `estimatedReadingTime` (number): The estimated reading time for the blog post.\n            \n        - `id` (string): The identifier of the blog post."
							},
							"response": []
						},
						{
							"name": "get blogs by user",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/blogs/user/67b74a6a215f13ac2903694c",
									"host": [
										"{{URL}}"
									],
									"path": [
										"blogs",
										"user",
										"67b74a6a215f13ac2903694c"
									]
								},
								"description": "### GET /blogs/user/{userId}\n\nThis endpoint retrieves the blog details for a specific user.\n\n#### Request\n\nNo request body parameters are required. The request URL should include the user ID as a path parameter.\n\n- Path Parameters\n    \n    - userId (string, required): The unique identifier of the user.\n        \n\n#### Response\n\nThe response will be in JSON format and will include the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\"type\": \"string\"},\n    \"message\": {\"type\": \"string\"},\n    \"results\": {\"type\": \"integer\"},\n    \"data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"blogs\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"_id\": {\"type\": \"string\"},\n              \"title\": {\"type\": \"string\"},\n              \"content\": {\"type\": \"string\"},\n              \"author\": {\"type\": \"string\"},\n              \"isPublished\": {\"type\": \"boolean\"},\n              \"drafted\": {\"type\": \"boolean\"},\n              \"isEdited\": {\"type\": \"boolean\"},\n              \"isScheduled\": {\"type\": \"boolean\"},\n              \"isPrivate\": {\"type\": \"boolean\"},\n              \"uploadedImages\": {\"type\": \"array\"},\n              \"tags\": {\"type\": \"array\"},\n              \"categories\": {\"type\": \"array\"},\n              \"interActionsCount\": {\"type\": \"integer\"},\n              \"commentsCount\": {\"type\": \"integer\"},\n              \"isArchived\": {\"type\": \"boolean\"},\n              \"allowComments\": {\"type\": \"boolean\"},\n              \"sharesCount\": {\"type\": \"integer\"},\n              \"viewsCount\": {\"type\": \"integer\"},\n              \"toBeDeleted\": {\"type\": \"boolean\"},\n              \"underReview\": {\"type\": \"boolean\"},\n              \"slug\": {\"type\": \"string\"},\n              \"seo\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"metaTitle\": {\"type\": \"string\"},\n                  \"metaDescription\": {\"type\": \"string\"},\n                  \"canonicalUrl\": {\"type\": \"string\"},\n                  \"keywords\": {\"type\": \"array\"},\n                  \"_id\": {\"type\": \"string\"}\n                }\n              },\n              \"createdAt\": {\"type\": \"string\"},\n              \"updatedAt\": {\"type\": \"string\"},\n              \"estimatedReadingTime\": {\"type\": \"integer\"},\n              \"id\": {\"type\": \"string\"}\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n ```"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "favorites",
			"item": [
				{
					"name": "add to favorites",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"blogPostId\":\"67d6aebda4a7b3dd735e83c6\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/favorites",
							"host": [
								"{{URL}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete favorite item",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/favorites/67d6c4b0c3349e0a46d4335e",
							"host": [
								"{{URL}}"
							],
							"path": [
								"favorites",
								"67d6c4b0c3349e0a46d4335e"
							]
						},
						"description": "### DELETE /favorites/67b9cbd409a60828e7ad7951\n\nThis endpoint is used to delete a specific favorite item.\n\n#### Request Body\n\nThis endpoint does not require a request body.\n\n#### Response\n\nThe response for this request is a 204 status code with no content. Since the response does not contain any data, there is no JSON schema to document."
					},
					"response": []
				},
				{
					"name": "get all favorites items ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/favorites",
							"host": [
								"{{URL}}"
							],
							"path": [
								"favorites"
							]
						},
						"description": "# Get User Favorites\n\nThis endpoint retrieves the list of favorite blog posts for the user.\n\n## Request\n\n### Endpoint\n\n`GET /favorites`\n\n## Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\",\n    \"results\": 0,\n    \"data\": {\n        \"favorites\": [\n            {\n                \"_id\": \"\",\n                \"user\": \"\",\n                \"blogPost\": {\n                    \"_id\": \"\",\n                    \"title\": \"\",\n                    \"content\": \"\",\n                    \"author\": \"\",\n                    \"isPublished\": true,\n                    \"drafted\": true,\n                    \"isEdited\": true,\n                    \"isScheduled\": true,\n                    \"isPrivate\": true,\n                    \"uploadedImages\": [],\n                    \"tags\": [\"\"],\n                    \"categories\": [\"\"],\n                    \"interActionsCount\": 0,\n                    \"commentsCount\": 0,\n                    \"isArchived\": true,\n                    \"allowComments\": true,\n                    \"sharesCount\": 0,\n                    \"viewsCount\": 0,\n                    \"toBeDeleted\": true,\n                    \"underReview\": true,\n                    \"slug\": \"\",\n                    \"seo\": {\n                        \"metaTitle\": \"\",\n                        \"metaDescription\": \"\",\n                        \"canonicalUrl\": \"\",\n                        \"keywords\": [\"\"],\n                        \"_id\": \"\"\n                    },\n                    \"createdAt\": \"\",\n                    \"updatedAt\": \"\",\n                    \"__v\": 0,\n                    \"addToUnderReviewBy\": \"\",\n                    \"reviewStatus\": \"\",\n                    \"reviewedAt\": \"\",\n                    \"reviewedBy\": \"\",\n                    \"estimatedReadingTime\": 0,\n                    \"id\": \"\"\n                },\n                \"createdAt\": \"\",\n                \"updatedAt\": \"\"\n            }\n        ]\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "get favorite item",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/favorites/67d6c4ec94c5245a7b4e8876",
							"host": [
								"{{URL}}"
							],
							"path": [
								"favorites",
								"67d6c4ec94c5245a7b4e8876"
							]
						},
						"description": "This endpoint retrieves the favorite details for a specific user by their ID.\n\n### Request\n\nNo request body is required for this GET request.\n\n- URL: `{{URL}}/favorites/67b9cc4ea4c9407c0d5dabfc`\n    \n\n### Response\n\nThe response will be in JSON format with the following structure:\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\",\n    \"data\": {\n        \"favorite\": {\n            \"_id\": \"\",\n            \"user\": \"\",\n            \"blogPost\": \"\",\n            \"createdAt\": \"\",\n            \"updatedAt\": \"\",\n            \"__v\": 0\n        }\n    }\n}\n\n ```\n\n- `status`: Indicates the status of the response.\n    \n- `message`: Provides any additional message related to the response status.\n    \n- `data.favorite`: Contains the details of the favorite, including its ID, user, blog post, creation and update timestamps, and version."
					},
					"response": []
				}
			],
			"description": "The **Favorites** feature allows users to mark blog posts as their favorites. This feature enables users to keep track of their preferred blog posts, and view them easily whenever needed. The system allows adding, removing, and fetching favorite blog posts for a particular user."
		},
		{
			"name": "reading list",
			"item": [
				{
					"name": "settings",
					"item": [
						{
							"name": "allow auto remove ",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/reading-list/items/67dc9e5cf87b5933458317fe/auto-remove",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reading-list",
										"items",
										"67dc9e5cf87b5933458317fe",
										"auto-remove"
									]
								}
							},
							"response": []
						},
						{
							"name": "disable auto remove ",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{URL}}/reading-list/items/67dc9e5cf87b5933458317fe/auto-remove-disable",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reading-list",
										"items",
										"67dc9e5cf87b5933458317fe",
										"auto-remove-disable"
									]
								}
							},
							"response": []
						},
						{
							"name": "create reading reminder alert",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"alertTime\":\"21/3/2025 16:40\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/reading-list/items/67dc9e5cf87b5933458317fe/reminder-alert",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reading-list",
										"items",
										"67dc9e5cf87b5933458317fe",
										"reminder-alert"
									]
								}
							},
							"response": []
						},
						{
							"name": "reschedule reminder alert",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"alertTime\":\"23/3/2025 16:38\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/reading-list/items/67dc9e5cf87b5933458317fe/reminder-reschedule",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reading-list",
										"items",
										"67dc9e5cf87b5933458317fe",
										"reminder-reschedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete reminder aleart",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/reading-list/items/67dc9e5cf87b5933458317fe/reminder-delete",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reading-list",
										"items",
										"67dc9e5cf87b5933458317fe",
										"reminder-delete"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "crud",
					"item": [
						{
							"name": "get all reading list items ",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/reading-list",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reading-list"
									]
								},
								"description": "# Reading List API\n\nThis API endpoint makes an HTTP GET request to retrieve the reading list items.\n\n## Request\n\n### Endpoint\n\n`GET {{URL}}/reading-list`\n\n## Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\n### Response Body\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\",\n    \"results\": 0,\n    \"data\": {\n        \"readingListItems\": [\n            {\n                \"_id\": \"\",\n                \"user\": \"\",\n                \"blogPost\": {\n                    \"_id\": \"\",\n                    \"title\": \"\",\n                    \"content\": \"\",\n                    \"author\": \"\",\n                    \"isPublished\": true,\n                    \"drafted\": true,\n                    \"isEdited\": true,\n                    \"isScheduled\": true,\n                    \"isPrivate\": true,\n                    \"uploadedImages\": [],\n                    \"tags\": [\"\"],\n                    \"categories\": [\"\"],\n                    \"interActionsCount\": 0,\n                    \"commentsCount\": 0,\n                    \"isArchived\": true,\n                    \"allowComments\": true,\n                    \"sharesCount\": 0,\n                    \"viewsCount\": 0,\n                    \"toBeDeleted\": true,\n                    \"underReview\": true,\n                    \"slug\": \"\",\n                    \"seo\": {\n                        \"metaTitle\": \"\",\n                        \"metaDescription\": \"\",\n                        \"canonicalUrl\": \"\",\n                        \"keywords\": [\"\"],\n                        \"_id\": \"\"\n                    },\n                    \"createdAt\": \"\",\n                    \"updatedAt\": \"\",\n                    \"__v\": 0,\n                    \"estimatedReadingTime\": 0,\n                    \"id\": \"\"\n                },\n                \"status\": \"\",\n                \"autoRemove\": true,\n                \"notes\": \"\",\n                \"addedAt\": \"\",\n                \"createdAt\": \"\",\n                \"updatedAt\": \"\",\n                \"__v\": 0\n            }\n        ]\n    }\n}\n\n ```\n\n## Authentication\n\nThis request may require authentication based on the server configuration."
							},
							"response": []
						},
						{
							"name": "get reading list item",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/reading-list/67dc9da6f87b5933458317e7",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reading-list",
										"67dc9da6f87b5933458317e7"
									]
								},
								"description": "### GET /reading-list/{readingListId}\n\nThis endpoint retrieves a specific reading list item based on the provided ID.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n- Path Parameters\n    \n    - `readingListId` (string, required): The unique identifier for the reading list item.\n        \n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\",\n    \"data\": {\n        \"readingListItem\": {\n            \"_id\": \"\",\n            \"user\": \"\",\n            \"blogPost\": {\n                \"_id\": \"\",\n                \"title\": \"\",\n                \"content\": \"\",\n                \"author\": \"\",\n                \"isPublished\": true,\n                \"drafted\": true,\n                \"isEdited\": true,\n                \"isScheduled\": true,\n                \"isPrivate\": true,\n                \"uploadedImages\": [],\n                \"tags\": [\"\"],\n                \"categories\": [\"\"],\n                \"interActionsCount\": 0,\n                \"commentsCount\": 0,\n                \"isArchived\": true,\n                \"allowComments\": true,\n                \"sharesCount\": 0,\n                \"viewsCount\": 0,\n                \"toBeDeleted\": true,\n                \"underReview\": true,\n                \"slug\": \"\",\n                \"seo\": {\n                    \"metaTitle\": \"\",\n                    \"metaDescription\": \"\",\n                    \"canonicalUrl\": \"\",\n                    \"keywords\": [\"\"],\n                    \"_id\": \"\"\n                },\n                \"createdAt\": \"\",\n                \"updatedAt\": \"\",\n                \"__v\": 0,\n                \"estimatedReadingTime\": 0,\n                \"id\": \"\"\n            },\n            \"status\": \"\",\n            \"autoRemove\": true,\n            \"notes\": \"\",\n            \"addedAt\": \"\",\n            \"createdAt\": \"\",\n            \"updatedAt\": \"\",\n            \"__v\": 0\n        }\n    }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "add reading list item",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"blogPostId\": \"67d6c49dc3349e0a46d43358\",\n    \"notes\": \"hello from the new world of coding \"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/reading-list",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reading-list"
									]
								},
								"description": "### Add Blog Post to Reading List\n\nThis endpoint allows you to add a blog post to your reading list.\n\n#### Request Body\n\n- `blogPostId` (string): The ID of the blog post to be added.\n    \n- `notes` (string): Additional notes or comments for the blog post.\n    \n\n#### Response\n\nUpon successful addition, the response will have a status code of 201 and a JSON body with the following structure:\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\"\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "delete reading list item",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/reading-list/67ba2b18998d20043e99d79e",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reading-list",
										"67ba2b18998d20043e99d79e"
									]
								},
								"description": "The HTTP DELETE request is used to remove a specific item from the reading list. Upon successful execution, the API returns a 204 status code with no content in the response body.\n\n``` json\n{}\n\n ```"
							},
							"response": []
						}
					]
				},
				{
					"name": "management",
					"item": [
						{
							"name": "clear reading list ",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/reading-list",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reading-list"
									]
								},
								"description": "### DELETE /reading-list\n\nThis endpoint is used to delete a reading list.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\nThe response for this request is in JSON format and has the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\nThe response contains the status and message fields, both of type string."
							},
							"response": []
						},
						{
							"name": "mark list item as unread",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{URL}}/reading-list/items/67c6edacc17f29d2da312215/unread",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reading-list",
										"items",
										"67c6edacc17f29d2da312215",
										"unread"
									]
								},
								"description": "The HTTP PATCH request is used to update the status of a specific item in the reading list to mark it as unread. The request should be sent to {{URL}}/reading-list/items/67ba3c33cafc0fc081ab4f8d/unread.\n\n### Response\n\nThe response will be in JSON format with a 200 status code. The schema for the response will be as follows:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "mark list item  as completed",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{URL}}/reading-list/items/67dc9e5cf87b5933458317fe/completed",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reading-list",
										"items",
										"67dc9e5cf87b5933458317fe",
										"completed"
									]
								}
							},
							"response": []
						},
						{
							"name": "mark list item as reading",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{URL}}/reading-list/items/67dc9e5cf87b5933458317fe/reading",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reading-list",
										"items",
										"67dc9e5cf87b5933458317fe",
										"reading"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "interactions",
			"item": [
				{
					"name": "user",
					"item": [
						{
							"name": "create interaction",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"blogPostId\":\"67e71fc03ce7eccf6bf7df29\",\n    \"interactionType\":\"like\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/interactions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"interactions"
									]
								},
								"description": "### Interactions POST Request\n\nThis endpoint is used to create a new interaction for a specific blog post.\n\n#### Request Body\n\n- `blogPostId` (string) - The ID of the blog post for which the interaction is being created.\n    \n- `interactionType` (string) - The type of interaction being created (e.g., \"like\", \"comment\", \"share\").\n    \n\n#### Response\n\nThe response of this request is a JSON object conforming to the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"interactionId\": {\n      \"type\": \"string\"\n    },\n    \"blogPostId\": {\n      \"type\": \"string\"\n    },\n    \"interactionType\": {\n      \"type\": \"string\"\n    },\n    \"userId\": {\n      \"type\": \"string\"\n    },\n    \"timestamp\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "get all interactions on blog post",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/interactions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"interactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete interaction",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/interactions/67e720e29c5cd3762d46b59f",
									"host": [
										"{{URL}}"
									],
									"path": [
										"interactions",
										"67e720e29c5cd3762d46b59f"
									]
								},
								"description": "This endpoint allows the deletion of a specific interaction identified by its ID. The request should be sent using an HTTP DELETE method to the specified URL with the interaction ID in the endpoint.\n\n### Request Body\n\nThis request does not require a request body.\n\n### Response\n\nUpon successful execution, the server returns a status code of 204 with a content type of text/xml. The response body is empty (null)."
							},
							"response": []
						},
						{
							"name": "update interaction type",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"interactionType\":\"like\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/interactions/67e730e4da18a8aa94db1db3",
									"host": [
										"{{URL}}"
									],
									"path": [
										"interactions",
										"67e730e4da18a8aa94db1db3"
									]
								},
								"description": "This endpoint allows you to update a specific interaction by sending an HTTP PATCH request to {{URL}}/interactions/67e730e4da18a8aa94db1db3. The request should include a raw request body with the updated interaction type specified as \"love\".\n\n### Request Body\n\n- interactionType (string, required): The updated type of interaction.\n    \n\n### Response\n\nUpon a successful execution, the endpoint returns a 200 status code with a JSON response body containing the updated status and message. The response body structure is as follows:\n\n- status (string): The status of the response.\n    \n- message (string): A message related to the response."
							},
							"response": []
						},
						{
							"name": "get blog post interactions ",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"blogPostId\":\"67e71fc03ce7eccf6bf7df29\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/interactions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"interactions"
									]
								},
								"description": "This endpoint makes an HTTP GET request to retrieve interactions related to a blog post. The request should include a payload with the blogPostId parameter set to the ID of the blog post for which interactions are being retrieved.\n\n### Request Body\n\n- blogPostId (string) - The ID of the blog post for which interactions are being retrieved.\n    \n\n### Response\n\nUpon a successful execution (Status: 200), the response will be in JSON format and will include an array of interactions related to the specified blog post. Each interaction object contains details about the user, the blog post, the type of interaction, and timestamps for creation and update.\n\nExample Response:\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\",\n    \"results\": 0,\n    \"data\": {\n        \"interactions\": [\n            {\n                \"_id\": \"\",\n                \"user\": {\n                    \"_id\": \"\",\n                    \"firstName\": \"\",\n                    \"lastName\": \"\",\n                    \"bio\": \"\",\n                    \"email\": \"\",\n                    // ... (other user details)\n                },\n                \"blogPost\": {\n                    \"_id\": \"\",\n                    \"title\": \"\",\n                    \"content\": \"\",\n                    \"author\": \"\",\n                    // ... (other blog post details)\n                },\n                \"type\": \"\",\n                \"interactedAt\": \"\",\n                \"createdAt\": \"\",\n                \"updatedAt\": \"\"\n            }\n            // ... (more interaction objects)\n        ]\n    }\n}\n\n ```"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "admin",
					"item": [
						{
							"name": "roles",
							"item": [
								{
									"name": "list user roles",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/admin/users/67ee46988bdf79297559603b/roles",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"users",
												"67ee46988bdf79297559603b",
												"roles"
											]
										},
										"description": "### GET /admin/users/{userId}/roles\n\nThis endpoint retrieves the roles associated with a specific user.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n- `userId` (path parameter) : The unique identifier of the user for whom the roles are being retrieved.\n    \n\n#### Response\n\nThe response will be in JSON format and will have the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"data\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"userEmail\": {\n                    \"type\": \"string\"\n                },\n                \"roles\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        }\n    }\n}\n\n ```"
									},
									"response": []
								},
								{
									"name": "assign role to user",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"role\":\"blog-admin\"\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/admin/users/67d22fea820f08251ffcc1a2/assign-role",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"users",
												"67d22fea820f08251ffcc1a2",
												"assign-role"
											]
										},
										"description": "### POST /admin/users/677d737c2ae01046a98cba1e/assign-role\n\nThis endpoint is used to assign a role to a specific user.\n\n#### Request\n\n- Method: POST\n    \n- URL: {{URL}}/admin/users/677d737c2ae01046a98cba1e/assign-role\n    \n- Body:\n    \n    - role (text, required): The role to be assigned to the user.\n        \n\n#### Response\n\nThe response for this request can be represented as a JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
									},
									"response": []
								},
								{
									"name": "remove user role",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n       \"role\":\"blog-admin\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/admin/users/67d22fea820f08251ffcc1a2/remove-role",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"users",
												"67d22fea820f08251ffcc1a2",
												"remove-role"
											]
										},
										"description": "This endpoint is used to remove a specific role from a user in the admin panel. The HTTP DELETE request is sent to {{URL}}/admin/users/677d737c2ae01046a98cba1e/remove-role with the role to be removed specified in the request body.\n\n### Request Body\n\n- `role`: The role to be removed from the user.\n    \n\n### Response\n\nUpon successful execution, the endpoint returns a status code of 200 and a JSON response with the following fields:\n\n- `status`: Indicates the status of the operation.\n    \n- `message`: Provides additional information about the operation."
									},
									"response": []
								},
								{
									"name": "reset all user roles ",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{URL}}/admin/users/67d22fea820f08251ffcc1a2/reset-roles",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"users",
												"67d22fea820f08251ffcc1a2",
												"reset-roles"
											]
										},
										"description": "The HTTP PATCH request is used to reset the roles for a specific user in the admin panel. The request is sent to the endpoint `{{URL}}/admin/users/677d737c2ae01046a98cba1e/reset-roles`.\n\n### Response\n\nThe response returned has a status code of 200 and a content type of `application/json`. The response body follows the JSON schema below:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
									},
									"response": []
								}
							]
						},
						{
							"name": "CRUD",
							"item": [
								{
									"name": "Get all users ",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{URL}}/admin/users",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "1",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "name",
													"disabled": true
												},
												{
													"key": "createdAt[gte]",
													"value": "2023-01-01",
													"disabled": true
												},
												{
													"key": "likes[gt]",
													"value": "100",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "title,createdAt",
													"disabled": true
												},
												{
													"key": "search",
													"value": "mohamedramadan11b@gmail.com",
													"disabled": true
												}
											]
										},
										"description": "### GET /admin/users\n\nThis endpoint retrieves a list of all admin users.\n\n#### Request\n\nThere are no request parameters for this endpoint.\n\n#### Response\n\n- Status: 200 OK\n    \n- Content-Type: application/json\n    \n\n##### Response Body\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\",\n    \"length\": 0,\n    \"data\": {\n        \"users\": [\n            {\n                \"_id\": \"\",\n                \"firstName\": \"\",\n                \"lastName\": \"\",\n                \"bio\": \"\",\n                \"email\": \"\",\n                \"resendVerificationTokenCount\": 0,\n                \"emailVerified\": true,\n                \"isActive\": true,\n                \"deactivationRequestCount\": 0,\n                \"reactivationRequestCount\": 0,\n                \"deleteAccountRequestCount\": 0,\n                \"userAccountToBeDeleted\": true,\n                \"following\": 0,\n                \"followingIds\": [],\n                \"followers\": 0,\n                \"followerIds\": [],\n                \"profilePicture\": \"\",\n                \"profilePictureId\": \"\",\n                \"passwordResetRequestsAttempts\": 0,\n                \"roles\": [\"\"],\n                \"notificationsEnabled\": true,\n                \"emailVerificationToken\": \"\",\n                \"emailVerificationExpires\": \"\",\n                \"createdAt\": \"\",\n                \"updatedAt\": \"\",\n                \"__v\": 0,\n                \"lastVerificationEmailSentAt\": \"\",\n                \"passwordLastResetRequestAttemptDate\": \"\",\n                \"passwordResetToken\": \"\",\n                \"passwordResetTokenExpiredAt\": \"\",\n                \"passwordChangedAt\": \"\",\n                \"deactivationAccountToken\": \"\",\n                \"deactivationAccountTokenExpiredAt\": \"\",\n                \"lastDeactivationRequestAt\": \"\",\n                \"deleteAccountRequestToken\": \"\",\n                \"deleteAccountRequestTokenExpiredAt\": \"\",\n                \"lastDeleteAccountRequestAt\": \"\",\n                \"changeEmailRequestCount\": 0,\n                \"changeEmailRequestToken\": \"\",\n                \"changeEmailVerificationTokenExpiresAt\": \"\",\n                \"isChangeEmailRequestConfirmed\": true,\n                \"lastChangeEmailRequestAt\": \"\",\n                \"previousEmails\": [],\n                \"tempChangedEmail\": \"\",\n                \"tempChangedEmailVerificationTokenCount\": 0\n            }\n        ]\n    }\n}\n\n ```\n\nThis response contains an array of user objects with various attributes such as ID, name, email, account status, profile picture, roles, and other related information."
									},
									"response": []
								},
								{
									"name": "Delete user by id ",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL}}/admin/users/67d22fea820f08251ffcc1a2",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"users",
												"67d22fea820f08251ffcc1a2"
											]
										},
										"description": "### Delete User\n\nThis endpoint is used to delete a specific user by their ID.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\n- Status: 204\n    \n- Content-Type: text/xml"
									},
									"response": []
								},
								{
									"name": "Update user details ",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\":\"kivan\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/admin/users/67ce0d7e12918d732ff535d4",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"users",
												"67ce0d7e12918d732ff535d4"
											]
										},
										"description": "This endpoint is used to update user information by sending an HTTP PATCH request to the specified user's ID in the URL.\n\n### Request Body\n\n- The request body should be in raw format and include the following parameter:\n    \n    - `firstName` (string, required): The updated first name of the user.\n        \n    - all other feailds related to user model\n        \n\n### Response\n\nThe response will be in JSON format with the following schema:\n\n``` json\n{\n  \"status\": \"\",\n  \"message\": \"\",\n  \"data\": {\n    \"user\": {\n      \"_id\": \"\",\n      \"firstName\": \"\",\n      \"lastName\": \"\",\n      \"bio\": \"\",\n      \"email\": \"\",\n      \"resendVerificationTokenCount\": 0,\n      \"emailVerified\": true,\n      \"isActive\": true,\n      \"deactivationRequestCount\": 0,\n      \"reactivationRequestCount\": 0,\n      \"changeEmailRequestCount\": 0,\n      \"isChangeEmailRequestConfirmed\": true,\n      \"tempChangedEmailVerificationTokenCount\": 0,\n      \"deleteAccountRequestCount\": 0,\n      \"userAccountToBeDeleted\": true,\n      \"following\": 0,\n      \"followingIds\": [],\n      \"followers\": 0,\n      \"followerIds\": [],\n      \"profilePicture\": \"\",\n      \"profilePictureId\": \"\",\n      \"passwordResetRequestsAttempts\": 0,\n      \"roles\": [\"\"],\n      \"notificationsEnabled\": true,\n      \"previousEmails\": [],\n      \"createdAt\": \"\",\n      \"updatedAt\": \"\",\n      \"__v\": 0,\n      \"emailVerifiedAt\": \"\"\n    }\n  }\n}\n\n ```\n\nThe response includes the updated user object with various attributes related to the user's account."
									},
									"response": []
								},
								{
									"name": "Get user by id ",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/admin/users/67d230b78ddd19ea63c7216b",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"users",
												"67d230b78ddd19ea63c7216b"
											]
										},
										"description": "This endpoint makes an HTTP GET request to retrieve the details of a specific user with the given ID. The response will be in JSON format and will contain various user-related data.\n\n### Request\n\n- Method: GET\n    \n- URL: {{URL}}/admin/users/677d737c2ae01046a98cba1e\n    \n\n### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- {\n    \n- status:string,\n    \n- message:string,\n    \n- data:{\n    \n- user:{\n    \n    - user data\n        \n- }\n    \n- }"
									},
									"response": []
								},
								{
									"name": "create  user",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"zz0a123456az@gmail.com\",\n    \"firstName\":\"123456789\",\n    \"lastName\":\"king\",\n    \"password\":\"123456789\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/admin/users",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"users"
											]
										},
										"description": "### Create Admin User\n\nThis endpoint allows the admin to create a new user.\n\n#### Request Body\n\n- email (string): The email of the user.\n    \n- firstName (string): The first name of the user.\n    \n- lastName (string): The last name of the user.\n    \n- password (string): The password for the user account.\n    \n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"status\": \"\",\n  \"message\": \"\",\n  \"data\": {\n    \"user\": {\n      \"firstName\": \"\",\n      \"lastName\": \"\",\n      \"bio\": \"\",\n      \"email\": \"\",\n      \"resendVerificationTokenCount\": 0,\n      \"emailVerified\": true,\n      \"isActive\": true,\n      \"deactivationRequestCount\": 0,\n      \"reactivationRequestCount\": 0,\n      \"changeEmailRequestCount\": 0,\n      \"isChangeEmailRequestConfirmed\": true,\n      \"tempChangedEmailVerificationTokenCount\": 0,\n      \"deleteAccountRequestCount\": 0,\n      \"userAccountToBeDeleted\": true,\n      \"following\": 0,\n      \"followingIds\": [],\n      \"followers\": 0,\n      \"followerIds\": [],\n      \"profilePicture\": \"\",\n      \"profilePictureId\": \"\",\n      \"password\": \"\",\n      \"passwordResetRequestsAttempts\": 0,\n      \"roles\": [\"\"],\n      \"notificationsEnabled\": true,\n      \"_id\": \"\",\n      \"previousEmails\": [],\n      \"createdAt\": \"\",\n      \"updatedAt\": \"\",\n      \"__v\": 0,\n      \"emailVerificationToken\": \"\",\n      \"emailVerificationExpires\": \"\"\n    }\n  }\n}\n\n ```"
									},
									"response": []
								}
							]
						},
						{
							"name": "lock accounts",
							"item": [
								{
									"name": "un-Lock user account",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"unLockComment\":\"a very good person\"\n}   ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/admin/users/67d231318ddd19ea63c72170/unlock-account",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"users",
												"67d231318ddd19ea63c72170",
												"unlock-account"
											]
										},
										"description": "### Patch Unlock Account\n\nThis endpoint is used to unlock a user account by sending a PATCH request to the specified URL.\n\n#### Request Body\n\n- unLockComment (text, required): A comment describing the reason for unlocking the account.\n    \n\n#### Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
									},
									"response": []
								},
								{
									"name": "lock user account",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"lockReason\":\"he fucing admin\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/admin/users/67d231318ddd19ea63c72170/lock-account",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"users",
												"67d231318ddd19ea63c72170",
												"lock-account"
											]
										},
										"description": "### PATCH /admin/users/677d737c2ae01046a98cba1e/lock-account\n\nThis endpoint is used to lock the account of a specific user.\n\n#### Request Body\n\n- `lockReason`: (string) The reason for locking the user's account.\n    \n\n#### Response\n\nThe response for this request can be documented as a JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
									},
									"response": []
								}
							]
						},
						{
							"name": "band accounts",
							"item": [
								{
									"name": "ban user account",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"banAccountReason\":\"un goood user account\",\n    \"banAccountDaysNumber\":4\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/admin/users/67d231318ddd19ea63c72170/ban-account",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"users",
												"67d231318ddd19ea63c72170",
												"ban-account"
											]
										},
										"description": "### PATCH /admin/users/677d737c2ae01046a98cba1e/ban-account\n\nThis endpoint is used to ban a user account by providing a reason and the number of days for the ban.\n\n#### Request Body\n\n- banAccountReason (string, required): The reason for banning the user account.\n    \n- banAccountDaysNumber (integer, required): The number of days for the ban.\n    \n\n#### Response\n\nThe response for this request is in JSON format and includes the following fields:\n\n- status (string): The status of the ban operation.\n    \n- message (string): Additional message related to the ban operation.\n    \n\n#### JSON Schema\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\"type\": \"string\"},\n    \"message\": {\"type\": \"string\"}\n  }\n}\n\n ```"
									},
									"response": []
								},
								{
									"name": "un-ban  user account",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"adminUnbanComment\":\"success completee the mes\"\n\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/admin/users/67d231318ddd19ea63c72170/unban-account",
											"host": [
												"{{URL}}"
											],
											"path": [
												"admin",
												"users",
												"67d231318ddd19ea63c72170",
												"unban-account"
											]
										},
										"description": "The HTTP PATCH request is used to unban a user account in the admin panel. The request is sent to {{URL}}/admin/users/677d737c2ae01046a98cba1e/unban-account with a payload in raw request body type. The payload includes the field \"adminUnbanComment\" with a value indicating the admin's comment on the unban action.\n\n### Response\n\nThe response to this request is in JSON format and includes the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "user",
					"item": [
						{
							"name": "update profile picture ",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "profilePicture",
											"type": "file",
											"src": "/home/mohamed/Pictures/Screenshots/Screenshot from 2025-03-13 04-14-19.png"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/users/profile/picture",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"profile",
										"picture"
									]
								},
								"description": "### Update User Profile Picture\n\nThis endpoint is used to update the profile picture of a user.\n\n#### Request Body\n\n- form-data\n    - profilePicture (file): The new profile picture to be uploaded.\n\n#### Response\n\nThe response will be in JSON format with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\"type\": \"string\"},\n    \"message\": {\"type\": \"string\"},\n    \"data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"user\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"_id\": {\"type\": \"string\"},\n            \"firstName\": {\"type\": \"string\"},\n            \"lastName\": {\"type\": \"string\"},\n            \"email\": {\"type\": \"string\"},\n            \"resendVerificationTokenCount\": {\"type\": \"integer\"},\n            \"emailVerified\": {\"type\": \"boolean\"},\n            \"isActive\": {\"type\": \"boolean\"},\n            \"following\": {\"type\": \"integer\"},\n            \"followingIds\": {\"type\": \"array\"},\n            \"followers\": {\"type\": \"integer\"},\n            \"followerIds\": {\"type\": \"array\"},\n            \"bio\": {\"type\": \"string\"},\n            \"profilePicture\": {\"type\": \"string\"},\n            \"passwordResetRequestsAttempts\": {\"type\": \"integer\"},\n            \"roles\": {\"type\": \"array\"},\n            \"notificationsEnabled\": {\"type\": \"boolean\"},\n            \"emailVerificationToken\": {\"type\": \"string\"},\n            \"emailVerificationExpires\": {\"type\": \"string\"},\n            \"createdAt\": {\"type\": \"string\"},\n            \"updatedAt\": {\"type\": \"string\"},\n            \"__v\": {\"type\": \"integer\"},\n            \"lastVerificationEmailSentAt\": {\"type\": \"string\"},\n            \"passwordChangedAt\": {\"type\": \"string\"},\n            \"profilePictureId\": {\"type\": \"string\"}\n          }\n        }\n      }\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "get current user",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/users/profile",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"profile"
									]
								},
								"description": "### Get User Profile\n\nThis endpoint retrieves the profile data of the authenticated user.\n\n#### Request\n\n- Method: GET\n- URL: {{URL}}/users/profile\n    \n\n#### Response\n\n- Status: 200 OK\n- Content-Type: application/json\n    \n\n``` json\n{\n  \"status\": \"\",\n  \"message\": \"\",\n  \"data\": {\n    \"userData\": {\n      \"_id\": \"\",\n      \"firstName\": \"\",\n      \"lastName\": \"\",\n      \"email\": \"\",\n      \"resendVerificationTokenCount\": 0,\n      \"emailVerified\": true,\n      \"isActive\": true,\n      \"following\": 0,\n      \"followingIds\": [],\n      \"followers\": 0,\n      \"followerIds\": [],\n      \"bio\": \"\",\n      \"profilePicture\": \"\",\n      \"passwordResetRequestsAttempts\": 0,\n      \"roles\": [\"\"],\n      \"notificationsEnabled\": true,\n      \"emailVerificationToken\": \"\",\n      \"emailVerificationExpires\": \"\",\n      \"createdAt\": \"\",\n      \"updatedAt\": \"\",\n      \"__v\": 0,\n      \"lastVerificationEmailSentAt\": \"\",\n      \"passwordChangedAt\": \"\",\n      \"profilePictureId\": \"\"\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "update account information",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\":\"Mohamed\",\n    \"lastName\":\"Ramadan\",\n    \"bio\":\"A talent software enginner that hope one day will be one of the powerfull enginners.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/users/profile/information",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"profile",
										"information"
									]
								},
								"description": "### HTTP PATCH /users/profile/information\n\nThis endpoint is used to update the profile information of a user.\n\n#### Request Body\n\n- firstName (string, optional): The updated first name of the user.\n    \n- lastName (string, optional): The updated last name of the user.\n    \n- bio (string, optional): The updated biography of the user.\n    \n\n#### Response\n\nThe response of this request is documented as a JSON schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"data\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"user\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"_id\": {\n                            \"type\": \"string\"\n                        },\n                        \"firstName\": {\n                            \"type\": \"string\"\n                        },\n                        \"lastName\": {\n                            \"type\": \"string\"\n                        },\n                        \"email\": {\n                            \"type\": \"string\"\n                        },\n                        \"resendVerificationTokenCount\": {\n                            \"type\": \"integer\"\n                        },\n                        \"emailVerified\": {\n                            \"type\": \"boolean\"\n                        },\n                        \"isActive\": {\n                            \"type\": \"boolean\"\n                        },\n                        \"following\": {\n                            \"type\": \"integer\"\n                        },\n                        \"followingIds\": {\n                            \"type\": \"array\"\n                        },\n                        \"followers\": {\n                            \"type\": \"integer\"\n                        },\n                        \"followerIds\": {\n                            \"type\": \"array\"\n                        },\n                        \"bio\": {\n                            \"type\": \"string\"\n                        },\n                        \"profilePicture\": {\n                            \"type\": \"string\"\n                        },\n                        \"passwordResetRequestsAttempts\": {\n                            \"type\": \"integer\"\n                        },\n                        \"roles\": {\n                            \"type\": \"array\"\n                        },\n                        \"notificationsEnabled\": {\n                            \"type\": \"boolean\"\n                        },\n                        \"emailVerificationToken\": {\n                            \"type\": \"string\"\n                        },\n                        \"emailVerificationExpires\": {\n                            \"type\": \"string\"\n                        },\n                        \"createdAt\": {\n                            \"type\": \"string\"\n                        },\n                        \"updatedAt\": {\n                            \"type\": \"string\"\n                        },\n                        \"__v\": {\n                            \"type\": \"integer\"\n                        },\n                        \"lastVerificationEmailSentAt\": {\n                            \"type\": \"string\"\n                        },\n                        \"passwordChangedAt\": {\n                            \"type\": \"string\"\n                        },\n                        \"profilePictureId\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "change account password",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentPassword\":\"123456789\",\n    \"newPassword\":\"Aa!123456\",\n    \"newPasswordConfirmation\":\"Aa!123456\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/users/account/password",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"account",
										"password"
									]
								},
								"description": "### Update User Password\n\nThis endpoint is used to update the password for a user account.\n\n#### Request Body\n\n- `currentPassword` (string) - The current password of the user.\n- `newPassword` (string) - The new password for the user account.\n- `newPasswordConfirmation` (string) - Confirmation of the new password.\n    \n\n#### Response\n\nThe response for this request is a JSON object conforming to the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Enable account notification",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{URL}}/users/account/notifications/enable",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"account",
										"notifications",
										"enable"
									]
								},
								"description": "The `PATCH /users/account/notifications/enable` endpoint is used to update the notification settings for a user's account.\n\n### Response\n\nThe response for this request is a JSON object with the following schema:\n\n- `status` (string): Represents the status of the notification update.\n- `message` (string): Provides additional information or a message related to the notification update.\n    \n\nExample:\n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\"\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "disable account notifications",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/users/account/notifications/disable",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"account",
										"notifications",
										"disable"
									]
								},
								"description": "\n### Update User Notification Preferences\n\nThis endpoint is used to disable notifications for a user's account.\n\n**Request Body**\n- No request body is required for this endpoint.\n\n**Response**\n- Status: 200 OK\n- Content Type: application/json\n- Body:\n  ```json\n  {\n      \"status\": \"\",\n      \"message\": \"\"\n  }\n  ```\n"
							},
							"response": []
						},
						{
							"name": "deactivate user account request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{URL}}/users/account/deactivate-request",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"account",
										"deactivate-request"
									]
								},
								"description": "### Deactivate User Account\n\nThis endpoint is used to deactivate a user account request\n\nthe user will recive an email with link when he click this link he will confirm the deactiation process.\n\n- **Response**\n    \n\n- `status` (string): The status of the deactivation process.\n- `message` (string): Additional information about the deactivation process."
							},
							"response": []
						},
						{
							"name": "confirm account deactivation",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{URL}}/users/account/deactivate-confirm/ce9083d39124bdb15c705080f80afddaeda8892625571a854cf73657e0cfb807",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"account",
										"deactivate-confirm",
										"ce9083d39124bdb15c705080f80afddaeda8892625571a854cf73657e0cfb807"
									]
								}
							},
							"response": []
						},
						{
							"name": "activate user account",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{URL}}/users/account/activate/eb1f7c8a2ba7bda48eae4e1a2f03d56d54a24f9061e62b738ba9d1c2eae6172c",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"account",
										"activate",
										"eb1f7c8a2ba7bda48eae4e1a2f03d56d54a24f9061e62b738ba9d1c2eae6172c"
									]
								},
								"description": "### Activate User Account\n\nThis endpoint triggers the activation of a user account using the provided activation code.\n\n#### Request Body\n\n- No request body parameters required.\n    \n\n#### Response\n\nThe response is in JSON format and follows the schema below:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "delete account request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{URL}}/users/account/deletion-request",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"account",
										"deletion-request"
									]
								},
								"description": "### Create Account Deletion Request\n\nThis endpoint allows the user to send a request to delete their account.\n\n#### Request Body Parameters\n\n#### Response\n\n- `status` (string): The status of the account deletion request.\n- `message` (string): Additional information or message related to the account deletion request."
							},
							"response": []
						},
						{
							"name": "confirm account deletion ",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/users/account/confirm-deletion/54a2fa45e4730ba057249d06e00be6cb6775102549fae5ff1c2798be9ddd4b22",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"account",
										"confirm-deletion",
										"54a2fa45e4730ba057249d06e00be6cb6775102549fae5ff1c2798be9ddd4b22"
									]
								},
								"description": "This endpoint sends an HTTP DELETE request to confirm the deletion of a user account with a specific confirmation code.\n\n### Request Body\n\nThis request does not require a request body.\n\n### Response\n\nUpon successful execution, the server responds with a status code of 200 and a JSON object in the response body. The JSON object contains the following fields:\n\n- `status`: (string) Indicates the status of the deletion confirmation.\n- `message`: (string) Provides additional information regarding the deletion confirmation process."
							},
							"response": []
						},
						{
							"name": "change account email request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"newEmail\":\"mohamedramadanmeray@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/users/account/email/change-request",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"account",
										"email",
										"change-request"
									]
								},
								"description": "### Change User Email Request\n\nThis endpoint is used to initiate a request to change the user's email.\n\n#### Request Body\n\n- `newEmail`: (string) The new email address for the user's account.\n    \n\n#### Response\n\n- `status`: (string) The status of the request.\n- `message`: (string) Additional message related to the status."
							},
							"response": []
						},
						{
							"name": "confirm account email change",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{URL}}/users/account/email/confirm-change/364ce687e118b1cbeae7d6944efaab794a9e3b354307ae3fe8b36a43e51343b5",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"account",
										"email",
										"confirm-change",
										"364ce687e118b1cbeae7d6944efaab794a9e3b354307ae3fe8b36a43e51343b5"
									]
								},
								"description": "### PATCH /users/account/email/confirm-change/{id}\n\nThis endpoint is used to confirm the change of email for a user account.\n\n#### Request Body\n\n- No request body is required for this endpoint.\n    \n\n#### Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\nThe response contains the status and a message, both of which are strings."
							},
							"response": []
						},
						{
							"name": "verify new changed email address",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{URL}}/users/account/email/verify-new-email/4d0c820a0f6a69f9e5c36e62a278369b52ffb67d9fe3d4be2964c8581ae3ab1e",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"account",
										"email",
										"verify-new-email",
										"4d0c820a0f6a69f9e5c36e62a278369b52ffb67d9fe3d4be2964c8581ae3ab1e"
									]
								},
								"description": "\nThis endpoint sends an HTTP PATCH request to verify a new email for a user's account. The request body should include the new email verification token in the URL. The response will have a status code of 200 and a JSON body with a status and message field.\n\n### Request Body\n- No request body parameters are required for this endpoint.\n\n### Response\n- `status` (string): Indicates the status of the email verification process.\n- `message` (string): Provides additional information about the verification status.\n\n"
							},
							"response": []
						},
						{
							"name": "resend new account verification token",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{URL}}/users/account/email/resend-new-email-token",
									"host": [
										"{{URL}}"
									],
									"path": [
										"users",
										"account",
										"email",
										"resend-new-email-token"
									]
								},
								"description": "### Request Description\n\nThis endpoint is used to resend a new email verification token for the user's account. The request should be sent as an HTTP POST to the specified URL with the necessary parameters in the request body.\n\n### Request Body\n\n- No specific request body parameters were provided.\n    \n\n### Response\n\nThe response to this request will be in JSON format with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\nThe response will include the status and a message indicating the result of the request."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "create comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "blogId",
									"value": "67e71fc03ce7eccf6bf7df29",
									"type": "text"
								},
								{
									"key": "content",
									"value": "its a very bad comment you have to keep your eyes for the other feelings",
									"type": "text"
								},
								{
									"key": "attachedImage",
									"type": "file",
									"src": "/home/mohamed/Pictures/Screenshots/Screenshot from 2025-04-07 00-48-51.png"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/comments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"comments"
							]
						},
						"description": "### POST /comments\n\nThis endpoint is used to create a new comment.\n\n#### Request\n\nThe request should be sent as an HTTP POST to {{URL}}/comments. The request body should be of form-data type and include the following parameters:\n\n- `blogId` (text): The ID of the blog to which the comment is being added.\n    \n- `content` (text): The text content of the comment.\n    \n- `attachedImage` (file): An optional image file attached to the comment.\n    \n\n#### Response\n\nUpon successful execution, the endpoint returns a response with status code 201 and content type application/json. The response body will contain a JSON object with the following schema:\n\n``` json\n{\n  \"status\": \"\",\n  \"message\": \"\"\n}\n\n ```\n\nThe `status` field indicates the status of the operation, and the `message` field provides additional information about the result of the request."
					},
					"response": []
				},
				{
					"name": "update comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "content",
									"value": "hello there we aim to udpate the comment for better experince ",
									"type": "text"
								},
								{
									"key": "attachedImage",
									"type": "file",
									"src": "/home/mohamed/Pictures/Screenshots/Screenshot from 2025-04-06 22-08-54.png"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/comments/67f2df8d554e06c907b31188",
							"host": [
								"{{URL}}"
							],
							"path": [
								"comments",
								"67f2df8d554e06c907b31188"
							]
						},
						"description": "### PATCH /comments/67f2df8d554e06c907b31188\n\nThis endpoint is used to update a specific comment.\n\n#### Request Body\n\n- `content` (text): The updated content of the comment.\n    \n- `attachedImage` (file): The updated image attached to the comment.\n    \n\n#### Response\n\nThe response is in JSON format with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "delete comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/comments/67f2df8d554e06c907b31188",
							"host": [
								"{{URL}}"
							],
							"path": [
								"comments",
								"67f2df8d554e06c907b31188"
							]
						},
						"description": "### DELETE /comments/67f2df8d554e06c907b31188\n\nThis endpoint is used to delete a specific comment with the given ID.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n#### Response\n\nThe response for this request returns a status code of 204, indicating that the request was successful with no content returned. The Content-Type of the response is \"text/xml\".\n\n#### JSON Schema\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {},\n    \"required\": [],\n    \"additionalProperties\": false\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "get comment by id ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/comments/67f2df8d554e06c907b31188",
							"host": [
								"{{URL}}"
							],
							"path": [
								"comments",
								"67f2df8d554e06c907b31188"
							]
						},
						"description": "### Get Comment Details\n\nThis endpoint retrieves the details of a specific comment.\n\n#### Request\n\n- Method: GET\n    \n- URL: `{{URL}}/comments/67f2df8d554e06c907b31188`\n    \n\n#### Response\n\n- Status: 200\n    \n- Content Type: application/json\n    \n\n``` json\n{\n    \"status\": \"\",\n    \"message\": \"\",\n    \"data\": {\n        \"comment\": {\n            \"attachedImage\": {\n                \"public_id\": \"\",\n                \"url\": \"\"\n            },\n            \"_id\": \"\",\n            \"blog\": \"\",\n            \"comment_author\": {\n                \"_id\": \"\",\n                \"firstName\": \"\",\n                \"email\": \"\"\n            },\n            \"content\": \"\",\n            \"createdAt\": \"\",\n            \"updatedAt\": \"\",\n            \"__v\": 0\n        }\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "get all comments on blog post",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"blogId\":\"67e71fc03ce7eccf6bf7df29\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/comments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"comments"
							]
						},
						"description": "### GET /comments\n\nThis endpoint retrieves comments for a specific blog.\n\n#### Request\n\n- Method: GET\n    \n- URL: {{URL}}/comments\n    \n- Headers:\n    \n    - Content-Type: application/json\n        \n- { \"blogId\": \"67e71fc03ce7eccf6bf7df29\"}\n    \n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\"type\": \"string\"},\n    \"message\": {\"type\": \"string\"},\n    \"results\": {\"type\": \"integer\"},\n    \"data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"comments\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"attachedImage\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"public_id\": {\"type\": \"string\"},\n                  \"url\": {\"type\": \"string\"}\n                }\n              },\n              \"_id\": {\"type\": \"string\"},\n              \"blog\": {\"type\": \"string\"},\n              \"comment_author\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"_id\": {\"type\": \"string\"},\n                  \"firstName\": {\"type\": \"string\"},\n                  \"email\": {\"type\": \"string\"}\n                }\n              },\n              \"content\": {\"type\": \"string\"},\n              \"createdAt\": {\"type\": \"string\"},\n              \"updatedAt\": {\"type\": \"string\"}\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n ```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Content Reporting",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "create content report request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentId\":\"67e71fc03ce7eccf6bf7df29\",\n    \"contentReportType\":\"harassment\",\n    \"details\":\"a very bad contnet you have to review it again\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/content-reporting",
									"host": [
										"{{URL}}"
									],
									"path": [
										"content-reporting"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admins",
					"item": [
						{
							"name": "get all content reporting requests ",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/content-reporting",
									"host": [
										"{{URL}}"
									],
									"path": [
										"content-reporting"
									],
									"query": [
										{
											"key": "page",
											"value": "2",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "1",
											"disabled": true
										}
									]
								},
								"description": "This endpoint makes an HTTP GET request to retrieve content reporting data.\n\n### Request Body\n\nThis request does not require a request body.\n\n### Response Body\n\n- `status` (string): The status of the response.\n    \n- `message` (string): A message related to the response.\n    \n- `results` (integer): The number of results returned.\n    \n- `data` (object): The main data object containing the following fields:\n    \n    - `requests` (array): An array of content reporting requests, each containing the following fields:\n        \n        - `_id` (string): The unique identifier of the request.\n            \n        - `user` (string): The user associated with the request.\n            \n        - `content` (string): The content reported.\n            \n        - `type` (string): The type of the reported content.\n            \n        - `status` (string): The status of the reported content.\n            \n        - `details` (string): Additional details about the reported content.\n            \n        - `isArchived` (boolean): Indicates whether the request is archived.\n            \n        - `createdAt` (string): The timestamp of when the request was created.\n            \n        - `updatedAt` (string): The timestamp of when the request was last updated."
							},
							"response": []
						},
						{
							"name": "get content request report",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/content-reporting/67fe4937e0e721921c51b536",
									"host": [
										"{{URL}}"
									],
									"path": [
										"content-reporting",
										"67fe4937e0e721921c51b536"
									]
								},
								"description": "This endpoint makes an HTTP GET request to retrieve content reporting details for a specific ID. The response will be in JSON format with a 200 status code. The response body will include the status, message, and data fields. The data field will contain details about the content reporting request, including the ID, user, content, type, status, details, archival status, creation and update timestamps, and version."
							},
							"response": []
						},
						{
							"name": "delete content reporting request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/content-reporting/67fe4937e0e721921c51b536",
									"host": [
										"{{URL}}"
									],
									"path": [
										"content-reporting",
										"67fe4937e0e721921c51b536"
									]
								}
							},
							"response": []
						},
						{
							"name": "update content reporting request ",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/content-reporting/id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"content-reporting",
										"id"
									]
								}
							},
							"response": []
						},
						{
							"name": "archive report",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{URL}}/content-reporting/67ff5825cb6bc61dee4ce495/archive",
									"host": [
										"{{URL}}"
									],
									"path": [
										"content-reporting",
										"67ff5825cb6bc61dee4ce495",
										"archive"
									]
								},
								"description": "### PATCH /content-reporting/67ff5825cb6bc61dee4ce495/archive\n\nThis endpoint is used to archive a specific content report.\n\n#### Request Body\n\n- No request body parameters are required for this endpoint.\n    \n\n#### Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\nThe response includes the status and message fields, both of which are strings."
							},
							"response": []
						},
						{
							"name": "unArchive  report",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{URL}}/content-reporting/67ff5825cb6bc61dee4ce495/unarchive",
									"host": [
										"{{URL}}"
									],
									"path": [
										"content-reporting",
										"67ff5825cb6bc61dee4ce495",
										"unarchive"
									]
								},
								"description": "### PATCH /content-reporting/67ff5825cb6bc61dee4ce495/unarchive\n\nThis endpoint is used to unarchive a specific content report.\n\n#### Request Body\n\n- No request body is required for this endpoint.\n    \n\n#### Response\n\nThe response for this request is in JSON format and has the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\nThe response will include the status and a message indicating the outcome of the unarchive operation."
							},
							"response": []
						},
						{
							"name": "process report",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{URL}}/content-reporting/67fe4937e0e721921c51b536/process",
									"host": [
										"{{URL}}"
									],
									"path": [
										"content-reporting",
										"67fe4937e0e721921c51b536",
										"process"
									]
								},
								"description": "This endpoint allows you to process a content report with an HTTP PATCH request. The request should be made to {{URL}}/content-reporting/67ff5825cb6bc61dee4ce495/process. The request body should be in raw format and include the \"processedNotes\" and \"resolutionType\" fields.\n\n### Request Body\n\n- `processedNotes` (string): A note describing the processing of the content report.\n    \n- `resolutionType` (string): Indicates the resolution type for the content report.\n    \n\n#### Example\n\n``` json\n{\n    \"processedNotes\": \"hello this is a very fake repo ...\",\n    \"resolutionType\": \"no_action\"\n}\n\n ```\n\n### Response\n\nThe response to this request is in JSON format and has the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "update report status ",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reportStatus\":\"resolved\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/content-reporting/67ff5825cb6bc61dee4ce495/update-status",
									"host": [
										"{{URL}}"
									],
									"path": [
										"content-reporting",
										"67ff5825cb6bc61dee4ce495",
										"update-status"
									]
								},
								"description": "This endpoint allows the user to update the status of a content report by sending an HTTP PATCH request to the specified URL. The request should include a payload with the \"reportStatus\" field to indicate the new status of the content report.\n\n### Request Body\n\n- reportStatus (string, required): The new status to be assigned to the content report.\n    \n\n### Response\n\nThe response of this request is a JSON object with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}